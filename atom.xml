<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iiooio</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://iiooio.com/"/>
  <updated>2018-04-19T02:48:57.490Z</updated>
  <id>http://iiooio.com/</id>
  
  <author>
    <name>iiooio</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS 越狱开发实战2—将指定邮件标记为已读</title>
    <link href="http://iiooio.com/blog/iOS%20%E8%B6%8A%E7%8B%B1%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%982_%E5%B0%86%E6%8C%87%E5%AE%9A%E9%82%AE%E4%BB%B6%E6%A0%87%E8%AE%B0%E4%B8%BA%E5%B7%B2%E8%AF%BB/"/>
    <id>http://iiooio.com/blog/iOS 越狱开发实战2_将指定邮件标记为已读/</id>
    <published>2017-03-25T09:30:39.000Z</published>
    <updated>2018-04-19T02:48:57.490Z</updated>
    
    <content type="html"><![CDATA[<h2 id="功能描述："><a href="#功能描述：" class="headerlink" title="功能描述："></a>功能描述：</h2><p>Apple Mail iOS10.2<br>1.在Mail界面上的某个地方加个按钮，点击后出现可编辑的白名单列表，以便进行添加、删除白名单操作。<br>2.每次Mail的收件箱刷新后,自动把白名单以外的邮件标记为已读。</p><h2 id="MailAutoMarker"><a href="#MailAutoMarker" class="headerlink" title="MailAutoMarker"></a>MailAutoMarker</h2><h3 id="定位Mail的可执行文件并class-dump它"><a href="#定位Mail的可执行文件并class-dump它" class="headerlink" title="定位Mail的可执行文件并class-dump它"></a>定位Mail的可执行文件并class-dump它</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ class-dump -S -s -H /Users/vvusu/Downloads/Reverse/iOSREDemo/AutoMobileMail/MobileMail.app -o /Users/vvusu/Downloads/Reverse/iOSREDemo/AutoMobileMail/MobileMailHeader</span><br></pre></td></tr></table></figure><h3 id="用Cycript找到Mailboxes界面的controller"><a href="#用Cycript找到Mailboxes界面的controller" class="headerlink" title="用Cycript找到Mailboxes界面的controller"></a>用Cycript找到Mailboxes界面的controller</h3><p>方法一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">WSCN-6SP:~ root# cycript -p MobileMail</span><br><span class="line">cy# [[[UIWindow keyWindow] rootViewController] _printHierarchy].toString()</span><br><span class="line">`&lt;MFApplicationSceneController 0x11c855400&gt;, state: appeared, view: &lt;UIView 0x11bd99ce0&gt;</span><br><span class="line">   | &lt;MailSplitViewController 0x11bd99980&gt;, state: appeared, view: &lt;UILayoutContainerView 0x11bd96e60&gt;</span><br><span class="line">   |    | &lt;UIMultiColumnViewController 0x11bd99200&gt;, state: appeared, view: &lt;UIView 0x11bdb3c90&gt;</span><br><span class="line">   |    |    | &lt;MailNavigationController 0x11c85c600&gt;, state: appeared, view: &lt;UILayoutContainerView 0x11bd51a40&gt;</span><br><span class="line">   |    |    |    | &lt;MailboxPickerController 0x11be36180&gt;, state: appeared, view: &lt;UITableView 0x11c063a00&gt;</span><br><span class="line">   |    |    | &lt;UINavigationController 0x11c8d9800&gt;, state: disappeared, view:  (view not loaded)</span><br><span class="line">   |    | &lt;MailDetailNavigationController 0x11c8b7a00&gt;, state: disappeared, view: &lt;UILayoutContainerView 0x11bd97060&gt; not in the window</span><br><span class="line">   |    |    | &lt;MFConversationViewController 0x11c802600&gt;, state: disappeared, view: &lt;UIView 0x11bd4f650&gt; not in the window`</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cy# [[UIApp keyWindow] recursiveDescription].toString()</span><br><span class="line">`&lt;MFWindow: 0x11dd45a40; baseClass = UIWindow; frame = (0 0; 414 736); autoresize = W+H; tintColor = UIExtendedSRGBColorSpace 0 0.478431 1 1; gestureRecognizers = &lt;NSArray: 0x174242c40&gt;; layer = &lt;UIWindowLayer: 0x174039680&gt;&gt;</span><br><span class="line">   | &lt;UIView: 0x11dd76880; frame = (0 0; 414 736); opaque = NO; autoresize = W+H; gestureRecognizers = &lt;NSArray: 0x17025bd20&gt;; layer = &lt;CALayer: 0x17403e760&gt;&gt;</span><br><span class="line">   |    | &lt;UIView: 0x11dd4c340; frame = (0 0; 414 736); layer = &lt;CALayer: 0x17403d7c0&gt;&gt;</span><br><span class="line">   |    |    | &lt;_MFActorItemView: 0x11dd7b100; frame = (0 0; 414 736); layer = &lt;CALayer: 0x170223be0&gt;&gt;</span><br><span class="line">   |    |    |    | &lt;UIView: 0x11de580e0; frame = (-0.666667 -0.666667; 415.333 737.333); alpha = 0; layer = &lt;CALayer: 0x170223ba0&gt;&gt;</span><br><span class="line">   |    |    |    | &lt;_MFActorSnapshotView: 0x11de58280; frame = (0 0; 414 736); opaque = NO; layer = &lt;CALayer: 0x170223ae0&gt;&gt;</span><br><span class="line">   |    |    |    |    | &lt;UIImageView: 0x11de58640; frame = (0 0; 414 736); userInteractionEnabled = NO; layer = &lt;CALayer: 0x170223b00&gt;&gt;</span><br><span class="line">   |    |    |    | &lt;UILayoutContainerView: 0x11dd77030; frame = (0 0; 414 736); clipsToBounds = YES; opaque = NO; autoresize = LM+W+RM+TM+H+BM; gestureRecognizers = &lt;NSArray: 0x17025ae50&gt;; layer = &lt;CALayer: 0x17403d4c0&gt;&gt;</span><br><span class="line">   |    |    |    |    |    | &lt;MailboxTableCell: 0x11e882e00; baseClass = UITableViewCell; frame = (0 28; 414 44); text = &apos;Inbox&apos;; autoresize = W; layer = &lt;CALayer: 0x17422a860&gt;&gt;</span><br><span class="line">   |    |    |    |    |    |    | &lt;UITableViewCellContentView: 0x11dd8fce0; frame = (0 0; 376 43.6667); gestureRecognizers = &lt;NSArray: 0x17425cc20&gt;; layer = &lt;CALayer: 0x17422a8a0&gt;&gt;</span><br><span class="line">   |    |    |    |    |    |    |    | &lt;UITableViewLabel: 0x11dd95d70; frame = (55 12; 305.333 20.3333); text = &apos;Inbox&apos;; userInteractionEnabled = NO; layer = &lt;_UILabelLayer: 0x174283bb0&gt;&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>搜索页面中第一个title<code>Inbox</code>找到相关类<code>MailboxTableCell 0x11e882e00</code> 找到它的响应连。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy# [#0x11e882e00 nextResponder]</span><br><span class="line">#&quot;&lt;UITableViewWrapperView: 0x11e87c200; frame = (0 0; 414 672); gestureRecognizers = &lt;NSArray: 0x17424fe40&gt;; layer = &lt;CALayer: 0x17403d3a0&gt;; contentOffset: &#123;0, 0&#125;; contentSize: &#123;414, 672&#125;&gt;&quot;</span><br><span class="line">cy# [#0x11e87c200 nextResponder]</span><br><span class="line">#&quot;&lt;UITableView: 0x11e896400; frame = (0 0; 414 736); clipsToBounds = YES; autoresize = W+H; gestureRecognizers = &lt;NSArray: 0x17424fb10&gt;; layer = &lt;CALayer: 0x17403f1a0&gt;; contentOffset: &#123;0, -64&#125;; contentSize: &#123;414, 560&#125;&gt;&quot;</span><br><span class="line">cy# [#0x11e896400 nextResponder]</span><br><span class="line">#&quot;&lt;MailboxPickerController: 0x11dd464a0&gt;&quot;</span><br></pre></td></tr></table></figure><p>最终找到控制器<code>MailboxPickerController</code><br>测试修改Title。发现Title改变。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy# [#0x11dd464a0 setTitle:@&quot;vvusu&quot;]</span><br></pre></td></tr></table></figure><p>测试修改导航栏左边按钮：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cy# #0x125e47660.navigationItem.leftBarButtonItem = #0x125e47660.navigationItem.rightBarButtonItem</span><br><span class="line">#&quot;&lt;UIBarButtonItem: 0x125de57a0&gt;&quot;</span><br></pre></td></tr></table></figure><p>确定MailboxPickerController就是<code>Mailboxes</code>界面的controller，可以通过它添加白名单按钮。</p><h2 id="用Reveal和Cycript找到All-Inboxes界面的-delegate"><a href="#用Reveal和Cycript找到All-Inboxes界面的-delegate" class="headerlink" title="用Reveal和Cycript找到All Inboxes界面的 delegate"></a>用Reveal和Cycript找到All Inboxes界面的 delegate</h2><p>点击进入Inbox页面，打印控制器列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cy# [[[UIWindow keyWindow] rootViewController] _printHierarchy].toString()</span><br><span class="line">`&lt;MFApplicationSceneController 0x126896a00&gt;, state: appeared, view: &lt;UIView 0x125e575d0&gt;</span><br><span class="line">   | &lt;MailSplitViewController 0x125d77db0&gt;, state: appeared, view: &lt;UILayoutContainerView 0x125e5a820&gt;</span><br><span class="line">   |    | &lt;UIMultiColumnViewController 0x125d77630&gt;, state: appeared, view: &lt;UIView 0x125e68210&gt;</span><br><span class="line">   |    |    | &lt;MailNavigationController 0x12684c800&gt;, state: appeared, view: &lt;UILayoutContainerView 0x125e47f30&gt;</span><br><span class="line">   |    |    |    | &lt;MailboxPickerController 0x125e47660&gt;, state: disappeared, view: &lt;UITableView 0x126872000&gt; not in the window</span><br><span class="line">   |    |    |    | &lt;MailboxContentViewController 0x126048c00&gt;, state: appeared, view: &lt;MFSwipableTableView 0x126855000&gt;</span><br><span class="line">   |    |    | &lt;UINavigationController 0x12606cc00&gt;, state: disappeared, view:  (view not loaded)</span><br><span class="line">   |    | &lt;MailDetailNavigationController 0x126893400&gt;, state: disappeared, view: &lt;UILayoutContainerView 0x125e58be0&gt; not in the window</span><br><span class="line">   |    |    | &lt;MFConversationViewController 0x12681e200&gt;, state: disappeared, view: &lt;UIView 0x125ea9620&gt; not in the window`</span><br></pre></td></tr></table></figure><p>找到控制器<code>MailboxContentViewController</code>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy# [#0x126048c00 setTitle:@&quot;vvusu&quot;]</span><br></pre></td></tr></table></figure><p>控制Title已修改，已找到实现代理控制器。</p><h2 id="MailboxContentViewController中定位“刷新完成”的响应函数"><a href="#MailboxContentViewController中定位“刷新完成”的响应函数" class="headerlink" title="MailboxContentViewController中定位“刷新完成”的响应函数"></a>MailboxContentViewController中定位“刷新完成”的响应函数</h2><p>看看<code>MailboxContentViewController</code>实现了哪些protocol，其中找到可疑的响应函数，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@interface MailboxContentViewController : UIViewController &lt;MFAddressBookClient, MailboxContentSelectionModelDataSource, MFMailboxFilterPickerViewControllerDelegate, MessageMiniMallObserver, MFReclaimable, MFSearchControllerDelegate, MFSwipableTableViewDelegate, UIPopoverPresentationControllerDelegate, UIViewControllerPreviewingDelegate, UIViewControllerPreviewingDelegate_Private, MFDisclosureSelectionTableViewDelegate, MFConversationViewControllerDelegate, MFMoveToPredictionTriageInteractionDelegate, MFTransferStackControllerDelegate, MFExpandedMessageCollectionStrategyDelegate, UITableViewDelegate, UITableViewDataSource, AutoFetchControllerDataSource, MFKeyCommandReacting&gt;</span><br></pre></td></tr></table></figure><p>查找<code>protocol</code>跟“刷新数据源”有关系的方法。</p><p>查看相关代理方法可能有关系的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MailboxContentSelectionModelDataSource</span><br><span class="line">MessageMiniMallObserver</span><br><span class="line">MFMailboxTableViewDelegate</span><br><span class="line">TransferMailboxPickerDelegate</span><br><span class="line">AutoFetchControllerDataSource</span><br></pre></td></tr></table></figure><h3 id="MailboxContentSelectionModelDataSource-Protocol-h"><a href="#MailboxContentSelectionModelDataSource-Protocol-h" class="headerlink" title="MailboxContentSelectionModelDataSource-Protocol.h"></a>MailboxContentSelectionModelDataSource-Protocol.h</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;NSObject-Protocol.h&quot;</span><br><span class="line"></span><br><span class="line">@class MFMessageInfo, MailboxContentSelectionModel, NSIndexPath, NSSet;</span><br><span class="line">@protocol MiniMallSource;</span><br><span class="line"></span><br><span class="line">@protocol MailboxContentSelectionModelDataSource &lt;NSObject&gt;</span><br><span class="line">- (_Bool)selectionModel:(MailboxContentSelectionModel *)arg1 deleteMovesToTrashForTableIndexPath:(NSIndexPath *)arg2;</span><br><span class="line">- (void)selectionModel:(MailboxContentSelectionModel *)arg1 getConversationStateAtTableIndexPath:(NSIndexPath *)arg2 hasUnread:(_Bool *)arg3 hasUnflagged:(_Bool *)arg4;</span><br><span class="line">- (void)selectionModel:(MailboxContentSelectionModel *)arg1 getSourceStateHasUnread:(_Bool *)arg2 hasUnflagged:(_Bool *)arg3;</span><br><span class="line">- (NSIndexPath *)selectionModel:(MailboxContentSelectionModel *)arg1 indexPathForMessageInfo:(MFMessageInfo *)arg2;</span><br><span class="line">- (NSSet *)selectionModel:(MailboxContentSelectionModel *)arg1 messageInfosAtTableIndexPath:(NSIndexPath *)arg2;</span><br><span class="line">- (NSSet *)selectionModel:(MailboxContentSelectionModel *)arg1 messagesForMessageInfos:(NSSet *)arg2;</span><br><span class="line">- (_Bool)selectionModel:(MailboxContentSelectionModel *)arg1 shouldArchiveByDefaultForTableIndexPath:(NSIndexPath *)arg2;</span><br><span class="line">- (id &lt;MiniMallSource&gt;)selectionModel:(MailboxContentSelectionModel *)arg1 sourceForMessageInfo:(MFMessageInfo *)arg2;</span><br><span class="line">- (_Bool)selectionModel:(MailboxContentSelectionModel *)arg1 supportsArchivingForTableIndexPath:(NSIndexPath *)arg2;</span><br><span class="line">- (NSSet *)sourcesForSelectionModel:(MailboxContentSelectionModel *)arg1;</span><br><span class="line"></span><br><span class="line">@optional</span><br><span class="line">- (NSSet *)selectionModel:(MailboxContentSelectionModel *)arg1 sourcesForMessageInfos:(NSSet *)arg2;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h3 id="MessageMiniMallObserver-Protocol-h"><a href="#MessageMiniMallObserver-Protocol-h" class="headerlink" title="MessageMiniMallObserver-Protocol.h"></a>MessageMiniMallObserver-Protocol.h</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@class NSNotification;</span><br><span class="line">@protocol MessageMiniMallObserver</span><br><span class="line">- (void)miniMallCurrentMessageRemoved:(NSNotification *)arg1;</span><br><span class="line">- (void)miniMallDidFinishSearch:(NSNotification *)arg1;</span><br><span class="line">- (void)miniMallDidLoadMessages:(NSNotification *)arg1;</span><br><span class="line">- (void)miniMallFinishedFetch:(NSNotification *)arg1;</span><br><span class="line">- (void)miniMallGrowingMailboxesChanged:(NSNotification *)arg1;</span><br><span class="line">- (void)miniMallMessageCountDidChange:(NSNotification *)arg1;</span><br><span class="line">- (void)miniMallMessageCountWillChange:(NSNotification *)arg1;</span><br><span class="line">- (void)miniMallMessagesAtIndexPathsChanged:(NSNotification *)arg1;</span><br><span class="line">- (void)miniMallStartFetch:(NSNotification *)arg1;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>这个类中函数名含有完成时态动词，同时从“LoadMessages”、“FinishedFetch”、“MessageCountChanged”等函数的名字上来看，它可能会在刷新完成的前后得到调用。<br>接下来用LLDB在这3个函数的开头部分下断点，然后下拉刷新收件箱，看看它们的调用情况。首先用LLDB附加MobileMail，查看其ASLR偏移<code>0x00000000000d0000</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(lldb) process connect connect://192.168.11.66:1234</span><br><span class="line">Process 11804 stopped</span><br><span class="line">* thread #1: tid = 0xb3da2, 0x00000001882ed188 libsystem_kernel.dylib`mach_msg_trap + 8, queue = &apos;com.apple.main-thread&apos;, stop reason = signal SIGSTOP</span><br><span class="line">    frame #0: 0x00000001882ed188 libsystem_kernel.dylib`mach_msg_trap + 8</span><br><span class="line">libsystem_kernel.dylib`mach_msg_trap:</span><br><span class="line">-&gt;  0x1882ed188 &lt;+8&gt;: ret</span><br><span class="line"></span><br><span class="line">libsystem_kernel.dylib`mach_msg_overwrite_trap:</span><br><span class="line">    0x1882ed18c &lt;+0&gt;: movn   x16, #0x1f</span><br><span class="line">    0x1882ed190 &lt;+4&gt;: svc    #0x80</span><br><span class="line">    0x1882ed194 &lt;+8&gt;: ret</span><br><span class="line">(lldb)image list -o -f</span><br><span class="line">[  0] 0x00000000000d0000 /Applications/MobileMail.app/MobileMail(0x00000001000d0000)</span><br><span class="line">[  1] 0x0000000100430000 /Library/MobileSubstrate/MobileSubstrate.dylib(0x0000000100430000)</span><br><span class="line">[  2] 0x0000000007cc8000 /Users/vvusu/Library/Developer/Xcode/iOS DeviceSupport/10.2 (14C92)/Symbols/System/Library/PrivateFrameworks/UserManagement.framework/UserManagement</span><br><span class="line">[  3] 0x0000000007cc8000 /Users/vvusu/Library/Developer/Xcode/iOS DeviceSupport/10.2 (14C92)/Symbols/System/Library/Frameworks/OpenGLES.framework/OpenGLES</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>把MobileMail拖进IDA,查看<br><code>[MailboxContentViewController megaMallDidLoadMessages:]</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                     -[MailboxContentViewController miniMallDidLoadMessages:]:</span><br><span class="line">000000010000a910         stp        x20, x19, [sp, #-0x20]!                     ; Objective C Implementation defined at 0x10029b208 (instance method), DATA XREF=0x10029b208</span><br><span class="line">000000010000a914         stp        x29, x30, [sp, #0x10]</span><br><span class="line">000000010000a918         add        x29, sp, #0x10</span><br><span class="line">000000010000a91c         mov        x19, x0</span><br></pre></td></tr></table></figure><p><code>[MailboxContentViewController miniMallFinishedFetch:]</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                     -[MailboxContentViewController miniMallFinishedFetch:]:</span><br><span class="line">000000010003c57c         stp        x29, x30, [sp, #-0x10]!                     ; Objective C Implementation defined at 0x10029b1a8 (instance method), DATA XREF=0x10029b1a8</span><br><span class="line">000000010003c580         mov        x29, sp</span><br><span class="line">000000010003c584         sub        sp, sp, #0x30</span><br><span class="line">000000010003c588         adrp       x8, #0x100270000</span><br></pre></td></tr></table></figure><p><code>[MailboxContentViewController miniMallMessageCountDidChange:]</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">                     -[MailboxContentViewController miniMallMessageCountDidChange:]:</span><br><span class="line">000000010003c864         stp        x22, x21, [sp, #-0x30]!                     ; Objective C Implementation defined at 0x10029b238 (instance method), DATA XREF=0x10029b238</span><br><span class="line">000000010003c868         stp        x20, x19, [sp, #0x10]</span><br><span class="line">000000010003c86c         stp        x29, x30, [sp, #0x20]</span><br></pre></td></tr></table></figure><p>用LLDB在这些地址上下断点，然后下拉刷新，触发断点如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">(lldb) br s -a &apos;0x00000000000d0000 + 0x000000010000a910&apos;</span><br><span class="line">Breakpoint 1: where = MobileMail`_mh_execute_header + 25960, address = 0x00000001000da910</span><br><span class="line">(lldb) br s -a &apos;0x00000000000d0000 + 0x000000010003c57c&apos;</span><br><span class="line">Breakpoint 2: where = MobileMail`_mh_execute_header + 229844, address = 0x000000010010c57c</span><br><span class="line">(lldb) br s -a &apos;0x00000000000d0000 + 0x000000010003c864&apos;</span><br><span class="line">Breakpoint 3: where = MobileMail`_mh_execute_header + 230588, address = 0x000000010010c864</span><br><span class="line">(lldb) c</span><br><span class="line">Process 11804 resuming</span><br><span class="line">Process 11804 stopped</span><br><span class="line">* thread #1: tid = 0xb3da2, 0x000000010010c864 MobileMail`_mh_execute_header + 247908, queue = &apos;MessageMiniMall.0x1741841d0&apos;, stop reason = breakpoint 3.1</span><br><span class="line">    frame #0: 0x000000010010c864 MobileMail`_mh_execute_header + 247908</span><br><span class="line">MobileMail`_mh_execute_header:</span><br><span class="line">-&gt;  0x10010c864 &lt;+247908&gt;: stp    x22, x21, [sp, #-48]!</span><br><span class="line">    0x10010c868 &lt;+247912&gt;: stp    x20, x19, [sp, #16]</span><br><span class="line">    0x10010c86c &lt;+247916&gt;: stp    x29, x30, [sp, #32]</span><br><span class="line">    0x10010c870 &lt;+247920&gt;: add    x29, sp, #32              ; =32</span><br><span class="line">(lldb) c</span><br><span class="line">Process 11804 resuming</span><br><span class="line">Process 11804 stopped</span><br><span class="line">* thread #34: tid = 0xb45b7, 0x000000010010c57c MobileMail`_mh_execute_header + 247164, stop reason = breakpoint 2.1</span><br><span class="line">    frame #0: 0x000000010010c57c MobileMail`_mh_execute_header + 247164</span><br><span class="line">MobileMail`_mh_execute_header:</span><br><span class="line">-&gt;  0x10010c57c &lt;+247164&gt;: stp    x29, x30, [sp, #-16]!</span><br><span class="line">    0x10010c580 &lt;+247168&gt;: mov    x29, sp</span><br><span class="line">    0x10010c584 &lt;+247172&gt;: sub    sp, sp, #48               ; =48</span><br><span class="line">    0x10010c588 &lt;+247176&gt;: adrp   x8, 564</span><br><span class="line">(lldb)</span><br><span class="line">Process 11804 resuming</span><br></pre></td></tr></table></figure><p><code>miniMallFinishedFetch</code>方法和<code>miniMallMessageCountDidChange</code>方法都会调用。<br>接下来的任务是寻找拿到所有邮件的方法。</p><h2 id="从MessageMiniMall中拿到所有邮件"><a href="#从MessageMiniMall中拿到所有邮件" class="headerlink" title="从MessageMiniMall中拿到所有邮件"></a>从MessageMiniMall中拿到所有邮件</h2><p>“协议方法被调用，一般是因为方法名中提到的那个事件发生了；而那件事发生的对象，一般是协议方法的参数”吗？删掉前2个断点，保留第3个，也就是<code>miniMallMessageCountDidChange:</code>上的断点，看看它的参数是什么，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(lldb) po $x19</span><br><span class="line">NSConcreteNotification 0x17425e570 &#123;name = MiniMallMessageCountDidChange; object = &lt;MessageMiniMall: 0x1741841d0&gt;; userInfo = MMRowsChangedContext removed:(none), inserted:(none), updated:&#123;(</span><br><span class="line">    &lt;NSIndexPath: 0xc000000000000016&gt; &#123;length = 2, path = 0 - 0&#125;</span><br><span class="line">)&#125;, relocated:(none), destination:(none), mergedConversations:(none)&#125;</span><br></pre></td></tr></table></figure><p>参数是一个<code>NSConcreteNotification</code>对象。查看其头文件，可知它继承自NSNotification。它的name是<code>miniMallMessageCountDidChange</code>,object是一个MessageMiniMall对象.</p><p>查看MessageMiniMall.h，看看它的内容，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@class MFActivityMonitor, MFMailMessage, MFMessageInfoOrderedSet, MessageSelectionStrategy, NSCache, NSDictionary, NSMutableSet, NSString, SourceSearchContext;</span><br><span class="line">@protocol OS_dispatch_queue;</span><br><span class="line"></span><br><span class="line">@interface MessageMiniMall : NSObject &lt;MFDiagnosticsGenerator, MessageSelectionDataSource, MiniMallSourceBulkOperationsDelegate&gt;</span><br><span class="line">...</span><br><span class="line">- (id)copyAllMessages;</span><br><span class="line">- (unsigned long long)localMessageCount;</span><br><span class="line">- (void)markAllMessagesAsDeletedOrArchived:(unsigned long long)arg1;</span><br><span class="line">- (void)markAllMessagesAsFlagged;</span><br><span class="line">- (void)markAllMessagesAsNotFlagged;</span><br><span class="line">- (void)markAllMessagesAsNotViewed;</span><br><span class="line">- (void)markAllMessagesAsViewed;</span><br><span class="line">- (void)markMessages:(id)arg1 asDeletedOrArchived:(unsigned long long)arg2;</span><br><span class="line">- (void)markMessagesAsFlagged:(id)arg1;</span><br><span class="line">- (void)markMessagesAsJunk:(id)arg1;</span><br><span class="line">- (void)markMessagesAsNotFlagged:(id)arg1;</span><br><span class="line">- (void)markMessagesAsNotJunk:(id)arg1;</span><br><span class="line">- (void)markMessagesAsNotViewed:(id)arg1;</span><br><span class="line">- (void)markMessagesAsViewed:(id)arg1;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>发现方法“复制所有邮件、当前邮件、读取早期邮件、本地邮件计数、邮件计数、标为已读……“<code>MessageMiniMall</code>应该就是一个管理所有邮件对象的管理者。尝试着通过<code>- (id)copyAllMessages;</code>拿到所有的邮件，在LLDB里试一下，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(lldb) po [0x174192620 copyAllMessages]</span><br><span class="line">&#123;(</span><br><span class="line">    &lt;MFLibraryMessage 0x143de28a0: library id 295, remote id 1333714967, conversation id 524108692882186053, 2017-02-09 01:29:08 +0000, subject hash: &lt;9cdcab9e 2f66ad52 f867dac2 ee7e3cf7 8e94d811&gt;&gt;,</span><br><span class="line">    &lt;MFLibraryMessage 0x143d8a1a0: library id 301, remote id 1333714974, conversation id -5996875561049400297, 2017-02-23 09:52:07 +0000, subject hash: &lt;957a6ec0 0d226e39 27721f65 82c7bdd2 ed321b71&gt;&gt;,</span><br><span class="line">    &lt;MFLibraryMessage 0x143d65730: library id 314, remote id 1333714977, conversation id -5225043346560767357, 2017-02-24 05:56:47 +0000, subject hash:    &lt;MFLibraryMessage 0x143ebbfe0: library id 315, remote id 1333714978, conversation id -856873890138472988, 2017-02-24 06:59:43 +0000, subject hash: &lt;da39a3ee 5e6b4b0d 3255bfef 95601890 afd80709&gt;&gt;,</span><br><span class="line">    &lt;MFLibraryMessage 0x143ddbf30: library id 313, remote id 1333714976, conversation id -5225043346560767357, 2017-02-24 05:50:42 +0000, subject hash: &lt;da39a3ee 5e6b4b0d 3255bfef 95601890 afd80709&gt;&gt;,</span><br><span class="line">    &lt;MFLibraryMessage 0x143e63420: library id 300, remote id 1333714973, conversation id -3478309731197128726, 2017-02-21 04:00:11 +0000, subject hash: &lt;5fcacdee c1b93ceb f297ec10 5ae0d003 fa94e8e5&gt;&gt;</span><br><span class="line">)&#125;</span><br><span class="line">(lldb) p (int)[[$x19 object] localMessageCount]</span><br><span class="line">(int) $4 = 12</span><br><span class="line">(lldb) p (int)[[[$x19 object] copyAllMessages] count]</span><br><span class="line">(int) $5 = 12</span><br><span class="line">(lldb) p (int)[[$x19 object] messageCount]</span><br><span class="line">(int) $6 = 11</span><br><span class="line">(lldb) po [[[$x19 object] copyAllMessages] class]</span><br><span class="line">__NSSetM</span><br></pre></td></tr></table></figure><p><code>copyAllMessages</code>返回了一个<code>NSSet</code>，其中含有12个<code>MFLibraryMessage</code>对象，<code>MFLibraryMessage</code>对象中含有邮件摘要信息，且NSSet中对象的个数与<code>localMessageCount</code>的值相同。这个结果很好理解：为了节省带宽流量和本地空间，iOS没有必要一次性下 载邮件服务器上的所有邮件，因此会先存储个百十来封，用户如果要看更多的邮件，再去服务器获取（即 loadOlderMessages）。因此，<code>copyAllMessages</code>就是拿到所有邮件的方法。<br>同时<code>[MessageMiniMall markMessagesAsViewed:]</code>函数，如果不出意外，它就是把邮件标记为已读的方法，而参数则很有可能是一个含有<code>MFLibraryMessage</code>对象的<code>NSArray</code>或<code>NSSet</code>。</p><h2 id="从MFLibraryMessage中提取发件人地址，用MessageMiniMall标记已读"><a href="#从MFLibraryMessage中提取发件人地址，用MessageMiniMall标记已读" class="headerlink" title="从MFLibraryMessage中提取发件人地址，用MessageMiniMall标记已读"></a>从MFLibraryMessage中提取发件人地址，用MessageMiniMall标记已读</h2><p>一封邮件就是一个<code>MFLibraryMessage</code>对象，它的description里显示的正是邮件摘要。在MessageMiniMall的头文件中是找不到它的身影的，想必你也能猜到大致原因<code>MFLibraryMessage</code>来自一个外部dylib。<br>MFLibraryMessage.h的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@interface MFLibraryMessage : MFMailMessage &#123;</span><br><span class="line">    unsigned long long  _conversationFlags;</span><br><span class="line">    unsigned int  _libraryID;</span><br><span class="line">    unsigned int  _mailboxID;</span><br><span class="line">    NSString * _messageID;</span><br><span class="line">    NSMutableDictionary * _metadata;</span><br><span class="line">    NSMutableSet * _metadataChangedKeys;</span><br><span class="line">    MFLock * _metadataLock;</span><br><span class="line">    unsigned int  _originalMailboxID;</span><br><span class="line">    NSString * _remoteID;</span><br><span class="line">    unsigned long long  _size;</span><br><span class="line">    unsigned int  _uid;</span><br><span class="line">    unsigned long long  _uniqueRemoteId;</span><br><span class="line">&#125;</span><br><span class="line">+ (id)messageWithLibraryID:(unsigned int)arg1;</span><br><span class="line">- (id)_attachmentStorageLocation;</span><br><span class="line">- (void)_forceLoadOfMessageSummaryFromProtectedStore;</span><br><span class="line">- (void)_initializeMetadata;</span><br><span class="line">- (void)_updateUID;</span><br><span class="line">- @end</span><br></pre></td></tr></table></figure><p><code>MFMessageInfo</code>中含有已读信息，但不含有邮件摘要信息，说明分析仍不够严密。再回过头仔细观察 MFLibraryMessage.h，发现它继承自<code>MFMailMessage</code>，从名字上看<code>MailMessage</code>用来代表 邮件显然比<code>LibraryMessage</code>更贴切。打开<code>MFMailMessage.h</code>，看看它的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@interface MFMessage : NSObject &lt;NSCopying&gt; &#123;</span><br><span class="line">    NSArray * _bcc;</span><br><span class="line">    NSString * _cachedMessageIDHeader;</span><br><span class="line">    unsigned int  _calculatedAttachmentInfo;</span><br><span class="line">    NSArray * _cc;</span><br><span class="line">    NSString * _contentType;</span><br><span class="line">    long long  _conversationID;</span><br><span class="line">    unsigned int  _dateReceivedInterval;</span><br><span class="line">    unsigned int  _dateSentInterval;</span><br><span class="line">    NSString * _externalID;</span><br><span class="line">    unsigned long long  _generationNumber;</span><br><span class="line">    long long  _listIDHash;</span><br><span class="line">    long long  _messageIDHeaderHash;</span><br><span class="line">    NSURL * _messageURL;</span><br><span class="line">    unsigned short  _numberOfAttachments;</span><br><span class="line">    MFMimePart * _parentPart;</span><br><span class="line">    unsigned int  _preferredEncoding;</span><br><span class="line">    NSArray * _sender;</span><br><span class="line">    NSString * _senderAddressComment;</span><br><span class="line">    MFMessageStore * _store;</span><br><span class="line">    NSString * _subject;</span><br><span class="line">    NSString * _summary;</span><br><span class="line">    NSArray * _to;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@property (nonatomic, retain) MFMimePart *parentPart;</span><br><span class="line">+ (Class)dataMessageStoreToUse;</span><br><span class="line">+ (id)messageWithRFC822Data:(id)arg1;</span><br><span class="line">+ (id)messageWithRFC822Data:(id)arg1 withParentPart:(id)arg2;</span><br><span class="line">+ (void)setMessageClassForStore:(id)arg1;</span><br></pre></td></tr></table></figure><p>summary、subject、sender、cc、bcc等邮件常用词汇出现在我们面前，但除了subject， MFMailMessage.h中只出现了setter，而不见getter。还 记得刚才我们的注意力是怎么从MFLibraryMessage.h 转移到MFMailMessage.h上的吗？想必你一定也注意 到了MFMailMessage的父类MFMessage。在查看它的 头文件前，先用LLDB看看[MFMailMessage subject]的 返回，验证一下到目前为止的分析，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">(lldb) po [[[[$x19 object] copyAllMessages] anyObject] subject]</span><br><span class="line">送您的20000金币已到账，速领兑大奖！</span><br><span class="line"></span><br><span class="line">(lldb) po [[[[$x19 object] copyAllMessages] anyObject] firstSender]</span><br><span class="line">&quot;疯狂炸金花&quot; &lt;crazy3@service.netease.com&gt;</span><br><span class="line"></span><br><span class="line">(lldb) po [[[[$x19 object] copyAllMessages] anyObject] sendersIfCached]</span><br><span class="line">&lt;__NSSingleObjectArrayI 0x170208ab0&gt;(</span><br><span class="line">&quot;疯狂炸金花&quot; &lt;crazy3@service.netease.com&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">(lldb) po [[[[$x19 object] copyAllMessages] anyObject] senders]</span><br><span class="line">&lt;__NSSingleObjectArrayI 0x170208ab0&gt;(</span><br><span class="line">&quot;疯狂炸金花&quot; &lt;crazy3@service.netease.com&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">(lldb) po [[[[$x19 object] copyAllMessages] anyObject] to]</span><br><span class="line">&lt;__NSSingleObjectArrayI 0x170208aa0&gt;(</span><br><span class="line">wedxzl@163.com</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">(lldb) po [[[[$x19 object] copyAllMessages] anyObject] dateSent]</span><br><span class="line">2017-02-09 01:28:56 +0000</span><br><span class="line"></span><br><span class="line">(lldb) po [[[[$x19 object] copyAllMessages] anyObject] subject]</span><br><span class="line">送您的20000金币已到账，速领兑大奖！</span><br><span class="line"></span><br><span class="line">(lldb) po [[[[$x19 object] copyAllMessages] anyObject] messageBody]</span><br><span class="line">&lt;MFMimeBody: 0x1704319a0&gt;</span><br></pre></td></tr></table></figure><p>firstSender返回了一个发件人，而sendersIfCached 和senders都返回了一个NSArray，说明默认情况下， 在iOS中一封邮件是有可能存在多个发件人的。尽管多个发件人的情况在现实生活中不常见，但为了避免遗漏，这里仍采用senders函数来提取一封邮件中所有可能的发件人地址。最后的任务就 是把邮件标记为已读。</p><p>[MessageMiniMall markMessagesAsViewed:]吗？它是 不是把邮件标为已读的方法呢？在这个方法上下一个 断点，看看在把一封邮件标记为已读时，它会不会得 到调用。先在IDA里定位到<code>[MessageMiniMall markMessagesAsViewed:]</code>，看看它的基地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                     -[MessageMiniMall markMessagesAsViewed:]:</span><br><span class="line">000000010006e710         stp        x22, x21, [sp, #-0x30]!                     ; Objective C Implementation defined at 0x1002a6d10 (instance method), DATA XREF=0x1002a6d10</span><br><span class="line">000000010006e714         stp        x20, x19, [sp, #0x10]</span><br><span class="line">000000010006e718         stp        x29, x30, [sp, #0x20]</span><br><span class="line">000000010006e71c         add        x29, sp, #0x20</span><br></pre></td></tr></table></figure><p>测试下断点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(lldb) br s -a &apos;0x00000000000c8000+0x000000010006e710&apos;</span><br><span class="line">Breakpoint 5: where = MobileMail`_mh_execute_header + 435048, address = 0x0000000100136710</span><br><span class="line">(lldb) c</span><br><span class="line">Process 11873 resuming</span><br><span class="line">* thread #1: tid = 0xb5cf8, 0x0000000100136710 MobileMail`_mh_execute_header + 452368, queue = &apos;com.apple.main-thread&apos;, stop reason = breakpoint 5.1</span><br><span class="line">    frame #0: 0x0000000100136710 MobileMail`_mh_execute_header + 452368</span><br><span class="line">MobileMail`_mh_execute_header:</span><br><span class="line">-&gt;  0x100136710 &lt;+452368&gt;: stp    x22, x21, [sp, #-48]!</span><br><span class="line">    0x100136714 &lt;+452372&gt;: stp    x20, x19, [sp, #16]</span><br><span class="line">    0x100136718 &lt;+452376&gt;: stp    x29, x30, [sp, #32]</span><br><span class="line">    0x10013671c &lt;+452380&gt;: add    x29, sp, #32              ; =32</span><br><span class="line">(lldb)</span><br></pre></td></tr></table></figure><p>[MessageMiniMall markMessagesAsViewed:]就是把邮件标为已读的方法，且其参数是一个由 MFLibraryMessage对象组成的NSSet。<br>至此，我们成功地在界面上添加了白名单按钮，捕获到了“刷新完成”事件，拿到了所有邮件，提取了其中的发件人地址，并能将它们标为已读。</p><p>1.在界面上寻找添加白名单按钮的地方和方法。<br>2.在protocol里寻找“刷新完成”的响应函数。<br>3.从MessageMiniMall中拿到所有邮件。<br>4.从MFLibraryMessage中提取发件人地址。<br>5.用MessageMiniMall将邮件标记为已读。</p><h2 id="编写tweak"><a href="#编写tweak" class="headerlink" title="编写tweak"></a>编写tweak</h2><h3 id="用Theos新建tweak工程“AutoMailMarker”"><a href="#用Theos新建tweak工程“AutoMailMarker”" class="headerlink" title="用Theos新建tweak工程“AutoMailMarker”"></a>用Theos新建tweak工程“AutoMailMarker”</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">➜  AutoMailMarker $THEOS/bin/nic.pl</span><br><span class="line">NIC 2.0 - New Instance Creator</span><br><span class="line">------------------------------</span><br><span class="line">  [1.] iphone/activator_event</span><br><span class="line">  [2.] iphone/application_modern</span><br><span class="line">  [3.] iphone/cydget</span><br><span class="line">  [4.] iphone/flipswitch_switch</span><br><span class="line">  [5.] iphone/framework</span><br><span class="line">  [6.] iphone/ios7_notification_center_widget</span><br><span class="line">  [7.] iphone/library</span><br><span class="line">  [8.] iphone/notification_center_widget</span><br><span class="line">  [9.] iphone/preference_bundle_modern</span><br><span class="line">  [10.] iphone/tool</span><br><span class="line">  [11.] iphone/tweak</span><br><span class="line">  [12.] iphone/xpc_service</span><br><span class="line">Choose a Template (required): 11</span><br><span class="line">Project Name (required): AutoMailMarker</span><br><span class="line">Package Name [com.yourcompany.automailmarker]: com.vvusu.automailmarker       [ Author/Maintainer Name [vvusu]:</span><br><span class="line">[iphone/tweak] MobileSubstrate Bundle filter [com.apple.springboard]: com.apple.mobilemail</span><br><span class="line">[iphone/tweak] List of applications to terminate upon installation (space-separated, &apos;-&apos; for none) [SpringBoard]: MobileMail</span><br><span class="line">Instantiating iphone/tweak in automailmarker/...</span><br><span class="line">Done.</span><br></pre></td></tr></table></figure><h3 id="构造AutoMailMarker-h"><a href="#构造AutoMailMarker-h" class="headerlink" title="构造AutoMailMarker.h"></a>构造AutoMailMarker.h</h3><p>构造它的目的仅仅是通过编译，避免出现任何报错信息和警告。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;AutoMailMarker.h&quot;</span><br><span class="line"></span><br><span class="line">@interface MailboxPickerController : UITableViewController</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface NSConcreteNotification : NSNotification</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface MessageMiniMall : NSObject</span><br><span class="line">- (NSSet *)copyAllMessages;</span><br><span class="line">- (void)markMessagesAsViewed:(NSSet *)arg1;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface MFMessageInfo : NSObject</span><br><span class="line">@property (nonatomic) BOOL read;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface MFLibraryMessage : NSObject</span><br><span class="line">- (NSArray *)senders;</span><br><span class="line">- (MFMessageInfo *)copyMessageInfo;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h3 id="编辑Tweak-xm"><a href="#编辑Tweak-xm" class="headerlink" title="编辑Tweak.xm"></a>编辑Tweak.xm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;AutoMailMarker.h&quot;</span><br><span class="line"></span><br><span class="line">%hook MailboxPickerController</span><br><span class="line">%new</span><br><span class="line">- (void)autoMailMarkerWhitelist &#123;</span><br><span class="line">    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@&quot;Whitelist&quot; message:@&quot;Please input an email address&quot; preferredStyle:UIAlertControllerStyleAlert];</span><br><span class="line"></span><br><span class="line">    UIAlertAction *okAction = [UIAlertAction actionWithTitle:@&quot;OK&quot; style:UIAlertActionStyleDefault handler:^(UIAlertAction * action) &#123;</span><br><span class="line">        UITextField *whitelistField = alertController.textFields.firstObject;</span><br><span class="line">        if ([whitelistField.text length] != 0) &#123;</span><br><span class="line">            [[NSUserDefaults standardUserDefaults] setObject:whitelistField.text forKey:@&quot;email.whitelist&quot;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@&quot;Cancel&quot; style:UIAlertActionStyleCancel handler:nil];</span><br><span class="line">    [alertController addAction:okAction];</span><br><span class="line">    [alertController addAction:cancelAction];</span><br><span class="line"></span><br><span class="line">    [alertController addTextFieldWithConfigurationHandler:^(UITextField *textField) &#123;</span><br><span class="line">        textField.text = [[NSUserDefaults standardUserDefaults] objectForKey:@&quot;email.whitelist&quot;];</span><br><span class="line">        textField.placeholder = textField.text;</span><br><span class="line">    &#125;];</span><br><span class="line">    [self presentViewController:alertController animated:YES completion:nil];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)viewDidLayoutSubviews &#123;</span><br><span class="line">    %orig;</span><br><span class="line">    self.navigationItem.leftBarButtonItem = [[[UIBarButtonItem alloc] initWithTitle: @&quot;Whitelist&quot; style:UIBarButtonItemStylePlain target:self action:@selector(autoMailMarkerWhitelist)]autorelease];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%end</span><br><span class="line"></span><br><span class="line">%hook MailboxContentViewController</span><br><span class="line">- (void)miniMallMessageCountDidChange:(NSConcreteNotification *)arg1 &#123;</span><br><span class="line">    %orig;</span><br><span class="line">    NSMutableSet *targetMessages = [NSMutableSet set];</span><br><span class="line">    NSString *whitelist = [NSString stringWithFormat:@&quot;&lt;%@&gt;&quot;,[[NSUserDefaults standardUserDefaults] objectForKey: @&quot;email.whitelist&quot;]];</span><br><span class="line">    MessageMiniMall *managerMail = [arg1 object];</span><br><span class="line">    NSSet *messages = [managerMail copyAllMessages];</span><br><span class="line">    for (MFLibraryMessage *message in messages) &#123;   </span><br><span class="line">         MFMessageInfo *messageInfo = [message copyMessageInfo];</span><br><span class="line">         for (NSString *sender in [message senders]) &#123;</span><br><span class="line">             if (!messageInfo.read &amp;&amp; [sender rangeOfString:whitelist].location == NSNotFound) &#123;</span><br><span class="line">                    [targetMessages addObject:message];</span><br><span class="line">                    [messageInfo release];</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         [messages release];</span><br><span class="line">         [managerMail markMessagesAsViewed:targetMessages];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">%end</span><br></pre></td></tr></table></figure><h3 id="编辑Makefile及control"><a href="#编辑Makefile及control" class="headerlink" title="编辑Makefile及control"></a>编辑Makefile及control</h3><p>Makefile文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">THEOS_DEVICE_IP = 192.168.11.66</span><br><span class="line">ARCHS = armv7 arm64</span><br><span class="line">TARGET = iphone:latest:8.0</span><br><span class="line"></span><br><span class="line">include $(THEOS)/makefiles/common.mk</span><br><span class="line"></span><br><span class="line">TWEAK_NAME = AutoMailMarker</span><br><span class="line">AutoMailMarker_FILES = Tweak.xm</span><br><span class="line">include $(THEOS_MAKE_PATH)/tweak.mk</span><br><span class="line">after-install::</span><br><span class="line">install.exec &quot;killall -9 MobileMail&quot;</span><br></pre></td></tr></table></figure><p>control文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Package: com.vvusu.automailmarker</span><br><span class="line">Name: AutoMailMarker</span><br><span class="line">Depends: mobilesubstrate, firmware (&gt;= 8.0)</span><br><span class="line">Version: 1.0</span><br><span class="line">Architecture: iphoneos-arm</span><br><span class="line">Description: Mark non-whitelist emails as read!</span><br><span class="line">Maintainer: vvusu</span><br><span class="line">Author: vvusu</span><br><span class="line">Section: Tweaks</span><br><span class="line">Homepage: http://blog.vvusu.com</span><br></pre></td></tr></table></figure><h2 id="安装与测试"><a href="#安装与测试" class="headerlink" title="安装与测试"></a>安装与测试</h2><p>打开邮件程序，添加白名单，测试给自己发一封邮件，点击Inbox查看效果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;功能描述：&quot;&gt;&lt;a href=&quot;#功能描述：&quot; class=&quot;headerlink&quot; title=&quot;功能描述：&quot;&gt;&lt;/a&gt;功能描述：&lt;/h2&gt;&lt;p&gt;Apple Mail iOS10.2&lt;br&gt;1.在Mail界面上的某个地方加个按钮，点击后出现可编辑的白名单列表，以
      
    
    </summary>
    
    
      <category term="iOS" scheme="http://iiooio.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS 越狱开发实战1—Notes 显示字数</title>
    <link href="http://iiooio.com/blog/iOS%20%E8%B6%8A%E7%8B%B1%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%981_Characount%20for%20Notes/"/>
    <id>http://iiooio.com/blog/iOS 越狱开发实战1_Characount for Notes/</id>
    <published>2017-03-20T08:38:39.000Z</published>
    <updated>2018-04-19T02:46:54.290Z</updated>
    
    <content type="html"><![CDATA[<h2 id="功能描述："><a href="#功能描述：" class="headerlink" title="功能描述："></a>功能描述：</h2><p>Apple Notes iOS10.2<br>Notes编辑时在导航栏动态显示当前文本的字数。</p><h2 id="CharacountForNotes"><a href="#CharacountForNotes" class="headerlink" title="CharacountForNotes"></a>CharacountForNotes</h2><h2 id="class-dump出MobileNotes的头文件"><a href="#class-dump出MobileNotes的头文件" class="headerlink" title="class-dump出MobileNotes的头文件"></a>class-dump出MobileNotes的头文件</h2><p>Notes不是从AppStore下载的，没有加壳，所以可以直接使用class-dump导出头文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ class-dump -S -s -H /Users/vvusu/Downloads/Reverse_iOS/REDemo/CountForNotes/MobileNotes -o /Users/vvusu/Downloads/Reverse_iOS/REDemo/CountForNotes/MobileNotesHeard</span><br><span class="line">2017-02-21 18:37:45.748 class-dump[71600:2785396] Warning: Parsing instance variable type failed, _cancelRenderingCount</span><br></pre></td></tr></table></figure><h2 id="用Cycript找到阅览界面及其controller"><a href="#用Cycript找到阅览界面及其controller" class="headerlink" title="用Cycript找到阅览界面及其controller"></a>用Cycript找到阅览界面及其controller</h2><p>查找MobileNotes进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">WSCN-6SP:~ root# ps -e |grep Applications</span><br><span class="line"> 8960 ??         0:00.45 /Applications/Maps.app/PlugIns/MapsWidget.appex/MapsWidget</span><br><span class="line"> 8990 ??         0:00.95 /Applications/BarrelSettings.app/BarrelSettings</span><br><span class="line"> 8992 ??         0:06.02 /Applications/AppStore.app/AppStore</span><br><span class="line"> 9002 ??         0:06.20 /Applications/Cydia.app/Cydia</span><br><span class="line"> 9061 ??         0:00.22 /Applications/MobileMail.app/PlugIns/MailVIPWidget.appex/MailVIPWidget</span><br><span class="line"> 9064 ??         0:02.29 /Applications/MobileMail.app/MobileMail</span><br><span class="line"> 9078 ??         0:02.47 /Applications/Preferences.app/Preferences</span><br><span class="line"> 9185 ??         0:00.93 /Applications/MobileNotes.app/MobileNotes</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure><p>进入cycript 调试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WSCN-6SP:~ root# cycript -p MobileNotes</span><br></pre></td></tr></table></figure><p>打印控制器列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cy# [[[UIWindow keyWindow] rootViewController] _printHierarchy].toString()</span><br><span class="line">`&lt;ICSplitViewController 0x1005667a0&gt;, state: appeared, view: &lt;UILayoutContainerView 0x10074ac80&gt;</span><br><span class="line">   | &lt;UIMultiColumnViewController 0x100567050&gt;, state: appeared, view: &lt;UIView 0x100574f00&gt;</span><br><span class="line">   |    | &lt;UINavigationController 0x10083f800&gt;, state: appeared, view: &lt;UILayoutContainerView 0x100753ba0&gt;</span><br><span class="line">   |    |    | &lt;ICFolderListViewController 0x100732fc0&gt;, state: disappeared, view: &lt;NotesBackgroundView 0x100757370&gt; not in the window</span><br><span class="line">   |    |    | &lt;ICModernNotesListViewController 0x100846800&gt;, state: disappeared, view: &lt;NotesBackgroundView 0x100728750&gt; not in the window</span><br><span class="line">   |    |    | &lt;UINavigationController 0x101036600&gt;, state: appeared, view: &lt;UILayoutContainerView 0x10072cc30&gt;</span><br><span class="line">   |    |    |    | &lt;ICNoteEditorViewController 0x10101b400&gt;, state: appeared, view: &lt;NotesBackgroundView 0x1005a0e70&gt;</span><br><span class="line">   |    |    |    |    | &lt;ICTextViewController 0x10059bc10&gt;, state: appeared, view: &lt;ICTextView 0x1008e3400&gt;</span><br><span class="line">   |    | &lt;UINavigationController 0x100850000&gt;, state: disappeared, view:  (view not loaded)`</span><br></pre></td></tr></table></figure><p>查看到<code>ICTextViewController</code>为最上层控制器，为笔记展示控制器。<br><code>ICNoteEditorViewController</code>为导航栏控制器。</p><p>测试修改一下NavigationController的title，发现改变了title显示,已经找到目标控制器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy# [#0x10101b400 setTitle:@&quot;nihao&quot;]</span><br></pre></td></tr></table></figure><h2 id="从ICNoteEditorViewController找到当前TextView对象"><a href="#从ICNoteEditorViewController找到当前TextView对象" class="headerlink" title="从ICNoteEditorViewController找到当前TextView对象"></a>从ICNoteEditorViewController找到当前TextView对象</h2><h2 id="到ICNoteEditorViewController-h里看看它的-定义"><a href="#到ICNoteEditorViewController-h里看看它的-定义" class="headerlink" title="到ICNoteEditorViewController.h里看看它的 定义"></a>到ICNoteEditorViewController.h里看看它的 定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@interface ICNoteEditorViewController : ICScrollViewDelegateViewController &lt;ICStyleSelectorDelegate, UIImagePickerControllerDelegate, UINavigationControllerDelegate, NSUserActivityDelegate, UIPopoverPresentationControllerDelegate, UIGestureRecognizerDelegate, UIViewControllerPreviewingDelegate_Private, ICAudioBarViewControllerDelegate, ICNoteEditorInputAccessoryViewDelegate, UICloudSharingControllerDelegate, ICNoteDelegate, UITextViewDelegate&gt;</span><br><span class="line">@property(retain, nonatomic) ICNote *note; // @synthesize note=_note;</span><br><span class="line">@property(readonly, nonatomic) ICTextView *textView;</span><br><span class="line">@property(retain, nonatomic) ICTextController *textController; // @synthesize textController=_textController;</span><br><span class="line"></span><br><span class="line">@property(readonly, nonatomic) double textViewBottomInsetThatWeWant;</span><br><span class="line">- (void)textViewDidBeginEditing:(id)arg1;</span><br><span class="line">- (void)textViewDidChange:(id)arg1;</span><br><span class="line">- (void)textViewDidChangeSelection:(id)arg1;</span><br><span class="line">- (void)textViewDidEndEditing:(id)arg1;</span><br><span class="line">- (id)textViewInputAccessoryView;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>查看<code>ICNoteEditorViewController</code>控制器中有实现编辑文字的代理，利用LLDB+Hopper 动态调试设置断点，点击编辑笔记时观察断点是否触发。</p><h3 id="开启Debugserver"><a href="#开启Debugserver" class="headerlink" title="开启Debugserver"></a>开启Debugserver</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">WSCN-6SP:~ root# debugserver *:1234 -a &quot;MobileNotes&quot;</span><br><span class="line">debugserver-@(#)PROGRAM:debugserver  PROJECT:debugserver-360.0.26.1</span><br><span class="line"> for arm64.</span><br><span class="line">Attaching to process MobileNotes...</span><br><span class="line">Listening to port 1234 for a connection from *...</span><br><span class="line">Waiting for debugger instructions for process 0.</span><br></pre></td></tr></table></figure><h3 id="LLDB连接Debugserver"><a href="#LLDB连接Debugserver" class="headerlink" title="LLDB连接Debugserver"></a>LLDB连接Debugserver</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ lldb</span><br><span class="line">(lldb) process connect connect://192.168.11.173:1234</span><br><span class="line">Process 8910 stopped</span><br><span class="line">* thread #1: tid = 0x7ecdf, 0x00000001882ed188 libsystem_kernel.dylib`mach_msg_trap + 8, queue = &apos;com.apple.main-thread&apos;, stop reason = signal SIGSTOP</span><br><span class="line">    frame #0: 0x00000001882ed188 libsystem_kernel.dylib`mach_msg_trap + 8</span><br><span class="line">libsystem_kernel.dylib`mach_msg_trap:</span><br><span class="line">-&gt;  0x1882ed188 &lt;+8&gt;: ret</span><br><span class="line">libsystem_kernel.dylib`mach_msg_overwrite_trap:</span><br><span class="line">    0x1882ed18c &lt;+0&gt;: movn   x16, #0x1f</span><br><span class="line">    0x1882ed190 &lt;+4&gt;: svc    #0x80</span><br><span class="line">    0x1882ed194 &lt;+8&gt;: ret</span><br><span class="line">(lldb)</span><br></pre></td></tr></table></figure><h3 id="MobileNotes-ASLR偏移"><a href="#MobileNotes-ASLR偏移" class="headerlink" title="MobileNotes ASLR偏移"></a>MobileNotes ASLR偏移</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(lldb) image list -o -f </span><br><span class="line">[  0] 0x00000000000e8000 /Applications/MobileNotes.app/MobileNotes(0x00000001000e8000)</span><br></pre></td></tr></table></figure><h3 id="Hopper分析"><a href="#Hopper分析" class="headerlink" title="Hopper分析"></a>Hopper分析</h3><p>把MobileNotes二进制文件拖入Hopper分析，在左边搜索栏中搜索<code>textViewDidChange</code>方法，找到<code>-[ICNoteEditorViewController textViewDidChange:]:</code>方法其基地址为<code>0000000100036948</code><br>偏移后地址：<code>0000000100036948</code>+<code>00000000000e8000</code> = <code>000000010011E948</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">                     -[ICNoteEditorViewController textViewDidChange:]:</span><br><span class="line">0000000100036948         stp        x28, x27, [sp, #-0x60]!                     ; Objective C Implementation defined at 0x1002bca68 (instance method), DATA XREF=0x1002bca68</span><br><span class="line">000000010003694c         stp        x26, x25, [sp, #0x10]</span><br><span class="line">0000000100036950         stp        x24, x23, [sp, #0x20]</span><br><span class="line">0000000100036954         stp        x22, x21, [sp, #0x30]</span><br><span class="line">0000000100036958         stp        x20, x19, [sp, #0x40]</span><br><span class="line">000000010003695c         stp        x29, x30, [sp, #0x50]</span><br></pre></td></tr></table></figure><h3 id="设置断点"><a href="#设置断点" class="headerlink" title="设置断点"></a>设置断点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(lldb) br s -a 10011E948</span><br><span class="line">Breakpoint 1: where = MobileNotes`_mh_execute_header + 201188, address = 0x000000010011e948</span><br><span class="line">(lldb) c</span><br><span class="line">Process 7767 resuming</span><br><span class="line">Process 7767 stopped</span><br><span class="line">* thread #1: tid = 0x77054, 0x000000010011e948 MobileNotes`_mh_execute_header + 223560, queue = &apos;com.apple.main-thread&apos;, stop reason = breakpoint 1.1</span><br><span class="line">    frame #0: 0x000000010011e948 MobileNotes`_mh_execute_header + 223560</span><br><span class="line">MobileNotes`_mh_execute_header:</span><br><span class="line">-&gt;  0x10011e948 &lt;+223560&gt;: stp    x28, x27, [sp, #-96]!</span><br><span class="line">    0x10011e94c &lt;+223564&gt;: stp    x26, x25, [sp, #16]</span><br><span class="line">    0x10011e950 &lt;+223568&gt;: stp    x24, x23, [sp, #32]</span><br><span class="line">    0x10011e954 &lt;+223572&gt;: stp    x22, x21, [sp, #48]</span><br></pre></td></tr></table></figure><p>当编辑笔记时断点多次触发，这样可以在控制器实现代理时动态获取文本，并能获取文本的个数。</p><h2 id="创建Tweak"><a href="#创建Tweak" class="headerlink" title="创建Tweak"></a>创建Tweak</h2><h3 id="创建CharacountForNotes-Tweak插件"><a href="#创建CharacountForNotes-Tweak插件" class="headerlink" title="创建CharacountForNotes Tweak插件"></a>创建CharacountForNotes Tweak插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">➜  CharacountForNotes $THEOS/bin/nic.pl</span><br><span class="line">NIC 2.0 - New Instance Creator</span><br><span class="line">------------------------------</span><br><span class="line">  [1.] iphone/activator_event</span><br><span class="line">  [2.] iphone/application_modern</span><br><span class="line">  [3.] iphone/cydget</span><br><span class="line">  [4.] iphone/flipswitch_switch</span><br><span class="line">  [5.] iphone/framework</span><br><span class="line">  [6.] iphone/ios7_notification_center_widget</span><br><span class="line">  [7.] iphone/library</span><br><span class="line">  [8.] iphone/notification_center_widget</span><br><span class="line">  [9.] iphone/preference_bundle_modern</span><br><span class="line">  [10.] iphone/tool</span><br><span class="line">  [11.] iphone/tweak</span><br><span class="line">  [12.] iphone/xpc_service</span><br><span class="line">Choose a Template (required): 11</span><br><span class="line">Project Name (required): CharacountForNotes</span><br><span class="line">Package Name [com.yourcompany.characountfornotes]:</span><br><span class="line">Author/Maintainer Name [vvusu]:com.vvusu.characountfornotes</span><br><span class="line">[iphone/tweak] MobileSubstrate Bundle filter [com.apple.springboard]: com.apple.mobilenotes</span><br><span class="line">[iphone/tweak] List of applications to terminate upon installation (space-separated, &apos;-&apos; for none) [SpringBoard]:</span><br><span class="line">Instantiating iphone/tweak in characountfornotes/...</span><br><span class="line">Done.</span><br></pre></td></tr></table></figure><h3 id="control文件内容"><a href="#control文件内容" class="headerlink" title="control文件内容"></a>control文件内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Package: com.vvusu.characountfornotes</span><br><span class="line">Name: CharacountForNotes</span><br><span class="line">Depends: mobilesubstrate, firmware (&gt;= 9.0)</span><br><span class="line">Version: 0.0.1</span><br><span class="line">Architecture: iphoneos-arm</span><br><span class="line">Description: Add a character count to Notes</span><br><span class="line">Maintainer: vvusu</span><br><span class="line">Author: vvusu</span><br><span class="line">Section: Tweaks</span><br><span class="line">Homepage: http://blog.vvusu.com</span><br></pre></td></tr></table></figure><h3 id="Makefile文件内容"><a href="#Makefile文件内容" class="headerlink" title="Makefile文件内容"></a>Makefile文件内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">THEOS_DEVICE_IP = 192.168.11.66</span><br><span class="line">ARCHS = armv7 arm64</span><br><span class="line">TARGET = iphone:latest:9.0 </span><br><span class="line"></span><br><span class="line">include $(THEOS)/makefiles/common.mk</span><br><span class="line">TWEAK_NAME = CharacountForNotes</span><br><span class="line">CharacountForNotes_FILES = Tweak.xm</span><br><span class="line"></span><br><span class="line">include $(THEOS_MAKE_PATH)/tweak.mk</span><br><span class="line"></span><br><span class="line">after-install::</span><br><span class="line">install.exec &quot;killall -9 SpringBoard&quot;</span><br></pre></td></tr></table></figure><h3 id="创建CharacountForNotes-h"><a href="#创建CharacountForNotes-h" class="headerlink" title="创建CharacountForNotes.h"></a>创建CharacountForNotes.h</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;CharacountForNotes.h&quot;</span><br><span class="line"></span><br><span class="line">@interface ICTextView : UIView</span><br><span class="line">@property (copy, nonatomic) NSString *text;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface ICNoteEditorViewController : UIViewController</span><br><span class="line">@property (retain, nonatomic) ICTextView *textView;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>这个头文件的所有内容均摘自类对应的头文件，构造它的目的仅仅是通过编译，避免任何报错和警告。</p><h3 id="Tweak-xm文件内容"><a href="#Tweak-xm文件内容" class="headerlink" title="Tweak.xm文件内容"></a>Tweak.xm文件内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;CharacountForNotes.h&quot;</span><br><span class="line">%hook ICNoteEditorViewController</span><br><span class="line">// Initialze title</span><br><span class="line">- (void)viewWillAppear:(BOOL)arg1 &#123;</span><br><span class="line">    %orig;</span><br><span class="line">    NSString *content = self.textView.text;</span><br><span class="line">    NSString *contentLength = [NSString stringWithFormat:@&quot;%lu&quot;, (unsigned long)[content length]];</span><br><span class="line">    self.title = contentLength;</span><br><span class="line">&#125;</span><br><span class="line">// Reset title</span><br><span class="line">- (void)viewDidDisappear:(BOOL)arg1 &#123;</span><br><span class="line">    %orig;</span><br><span class="line">    self.title = nil;</span><br><span class="line">&#125;</span><br><span class="line">// Update title</span><br><span class="line">- (void)textViewDidChange:(id)arg1 &#123;</span><br><span class="line">    %orig;</span><br><span class="line">    NSString *content = self.textView.text;</span><br><span class="line">    NSString *contentLength = [NSString stringWithFormat:@&quot;%lu&quot;, (unsigned long)[content length]];</span><br><span class="line">    self.title = contentLength;</span><br><span class="line">&#125;</span><br><span class="line">%end</span><br></pre></td></tr></table></figure><h2 id="插件测试与安装"><a href="#插件测试与安装" class="headerlink" title="插件测试与安装"></a>插件测试与安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜  characountfornotes make package install</span><br><span class="line">&gt; Making all for tweak CharacountForNotes…</span><br><span class="line">make[2]: Nothing to be done for `internal-library-compile&apos;.</span><br><span class="line">&gt; Making stage for tweak CharacountForNotes…</span><br><span class="line">dpkg-deb: building package &apos;com.vvusu.characountfornotes&apos; in &apos;./packages/com.vvusu.characountfornotes_0.0.1-13+debug_iphoneos-arm.deb&apos;.</span><br><span class="line">==&gt; Installing…</span><br><span class="line">(Reading database ... 4815 files and directories currently installed.)</span><br><span class="line">Preparing to unpack /tmp/_theos_install.deb ...</span><br><span class="line">Unpacking com.vvusu.characountfornotes (0.0.1-13+debug) over (0.0.1-12+debug) ...</span><br><span class="line">Setting up com.vvusu.characountfornotes (0.0.1-13+debug) ...</span><br><span class="line">install.exec &quot;killall -9 SpringBoard&quot;</span><br></pre></td></tr></table></figure><p>打开手机Note，开始测试。实际测试iOS9~iOS10都可以正常使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;功能描述：&quot;&gt;&lt;a href=&quot;#功能描述：&quot; class=&quot;headerlink&quot; title=&quot;功能描述：&quot;&gt;&lt;/a&gt;功能描述：&lt;/h2&gt;&lt;p&gt;Apple Notes iOS10.2&lt;br&gt;Notes编辑时在导航栏动态显示当前文本的字数。&lt;/p&gt;
&lt;h2 id
      
    
    </summary>
    
    
      <category term="iOS" scheme="http://iiooio.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS 内存检测</title>
    <link href="http://iiooio.com/blog/iOS_%E5%86%85%E5%AD%98%E6%A3%80%E6%B5%8B/"/>
    <id>http://iiooio.com/blog/iOS_内存检测/</id>
    <published>2016-12-01T07:40:56.000Z</published>
    <updated>2018-04-18T14:56:42.866Z</updated>
    
    <content type="html"><![CDATA[<p>为了测试内存泄漏方便，封装了一个Framework。</p><p>相似框架<br><a href="https://wereadteam.github.io/2016/02/22/MLeaksFinder/" target="_blank" rel="noopener">MLeaksFinder</a><br><a href="http://mrpeak.cn/blog/leak/" target="_blank" rel="noopener">PLeakSniffer</a></p><p>使用的时候直接导入Framework就可以，而且只在debug下开启, 真机会报错误，请删处Framework。<br><a id="more"></a></p><p>###内存泄漏注意事项</p><p>1.Block里面<code>self</code>强引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_headerView.followClickBlock = ^() &#123;</span><br><span class="line">  if (![self isLogin]) &#123;</span><br><span class="line">      [[MRouter sharedRouter] handleURL:[NSURL URLWithString:@&quot;https://passport.wallstreetcn.com/login&quot;] userInfo:nil];</span><br><span class="line">      return;</span><br><span class="line">  &#125;</span><br><span class="line">  [weakSelf dealFollowClick];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>block 里面的self用<code>wself</code>替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__weak typeof(self) wself = self;</span><br></pre></td></tr></table></figure><p>2.自定义代理时强引用delegate 会造成内存泄漏；</p><p>如果父VC持有子VC，并设置子VC的delegate为self（也就是父VC），这样的结果就是子VC也间接持有了父VC，造成循环引用，在Pop子VC的时候不会调用delloc.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property (nonatomic, strong) id&lt;ProfileEditPickerViewDelegate&gt; delegate;</span><br></pre></td></tr></table></figure><p>把<code>strong</code>修饰符改为<code>weak</code> 不用<code>assign</code></p><p>3.OC和CF转化出现的内存警告用完添加<code>CFRelease()</code>释放对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CFStringRef cfString = CFURLCreateStringByAddingPercentEscapes(kCFAllocatorDefault,(CFStringRef)picDataString,NULL,CFSTR(&quot;:/?#[]@!$&amp;’()*+,;=&quot;),kCFStringEncodingUTF8);</span><br><span class="line">NSString *baseString = [NSString stringWithString:(NSString *)cfString];</span><br><span class="line">CFRelease(cfString); //不添加会泄漏</span><br></pre></td></tr></table></figure><p>4.CATransition 动画<code>removedOnCompletion</code>属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CATransition *animation = [CATransition animation];</span><br><span class="line">animation.delegate = self;</span><br><span class="line">animation.duration = 0.3f;</span><br><span class="line">animation.timingFunction = UIViewAnimationCurveEaseInOut;</span><br><span class="line">animation.fillMode = kCAFillModeForwards;</span><br><span class="line">animation.type = kCATransitionPush;</span><br><span class="line">animation.subtype = kCATransitionFromLeft;</span><br><span class="line">animation.startProgress = 0.0;</span><br><span class="line">animation.endProgress = 1.0;</span><br><span class="line">animation.removedOnCompletion = NO; //有内存泄漏的风险</span><br><span class="line">[self.layer addAnimation:animation forKey:@&quot;animation&quot;];</span><br><span class="line">[self.textField resignFirstResponder];</span><br></pre></td></tr></table></figure><p>5.NSTimer<br>NSTimer会造成循环引用，timer会强引用target即self，在加入runloop的操作中，又引用了timer，所以在timer被invalidate之前，self也就不会被释放。<br>所以我们要注意，不仅仅是把timer当作实例变量的时候会造成循环引用，只要申请了timer，加入了runloop，并且target是self，虽然不是循环引用，但是self却没有释放的时机。如下方式申请的定时器，self已经无法释放了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSTimer *timer = [NSTimer timerWithTimeInterval:5 target:self selector:@selector(commentAnimation) userInfo:nil repeats:YES];</span><br><span class="line">[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];</span><br></pre></td></tr></table></figure><p>解决这种问题有几个实现方式，大家可以根据具体场景去选择：</p><p>增加startTimer和stopTimer方法，在合适的时机去调用，比如可以在viewDidDisappear时stopTimer，或者由这个类的调用者去设置。<br>每次任务结束时使用dispatch_after方法做延时操作。注意使用weakself，否则也会强引用self。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (void)startAnimation &#123;</span><br><span class="line">__weak typeof(self) wself = self;</span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        [weakSelf commentAnimation];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用GCD的定时器，同样注意使用weakself。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__weak typeof(self) wself = self;</span><br><span class="line">timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, dispatch_get_main_queue());</span><br><span class="line">dispatch_source_set_timer(timer, DISPATCH_TIME_NOW, 5 * NSEC_PER_SEC, 1 * NSEC_PER_SEC);</span><br><span class="line">dispatch_source_set_event_handler(timer, ^&#123;</span><br><span class="line">    [weakSelf commentAnimation];</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_resume(timer);</span><br></pre></td></tr></table></figure><p>6.NSNotification<br>使用block的方式增加notification，引用了self，在删除notification之前，self不会被释放，与timer的场景类似，其实这段代码已经声明了weakself，但是调用_eventManger方法还是引起了循环引用。<br>也就是说，即使我们没有调用self方法，_xxx也会造成循环引用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[[NSNotificationCenter defaultCenter] addObserverForName:kUserSubscribeNotification object:nil queue:nil usingBlock:^(NSNotification *note) &#123;</span><br><span class="line">    if (note) &#123;</span><br><span class="line">        Model *model=(Model *)note.object;</span><br><span class="line">        if ([model.subId integerValue] == [weakSelf.subId integerValue]) &#123;</span><br><span class="line">            [_eventManger playerSubsciption:NO];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.有一些图片很大用<code>[UIImage imageNamed:@&quot;&quot;]</code>加载的话回常驻内存，建议大的图片加载从本地文件加载<code>[UIImage imageWithContentsOfFile:@&quot;&quot;]</code></p><p>8.performSelector延时调用导致的内存泄露</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[self performSelector:@selector(method1:) withObject:self.tableLayer afterDelay:3];</span><br></pre></td></tr></table></figure><p>有时切换场景时延时函数已经被调用但还没有执行，这时tableLayer的引用计数没有减少到0，也就导致了切换场景dealloc方法没有被调用，出现了内存泄露。所以解决办法就是取消那些还没有来得及执行的延时函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[NSObject cancelPreviousPerformRequestsWithTarget:self]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了测试内存泄漏方便，封装了一个Framework。&lt;/p&gt;
&lt;p&gt;相似框架&lt;br&gt;&lt;a href=&quot;https://wereadteam.github.io/2016/02/22/MLeaksFinder/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MLeaksFinder&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://mrpeak.cn/blog/leak/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PLeakSniffer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用的时候直接导入Framework就可以，而且只在debug下开启, 真机会报错误，请删处Framework。&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://iiooio.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Hexo GithubPages搭建个人博客</title>
    <link href="http://iiooio.com/blog/Hexo_GithubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://iiooio.com/blog/Hexo_GithubPages搭建个人博客/</id>
    <published>2016-10-09T10:21:34.000Z</published>
    <updated>2018-04-18T15:01:49.112Z</updated>
    
    <content type="html"><![CDATA[<p>##系统环境配置</p><p>要使用Hexo，需要在你的系统中支持Nodejs以及Git</p><p>安装Node.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nodejs</span><br></pre></td></tr></table></figure><p>安装Git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure><a id="more"></a><p>##安装Hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ cd blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo g # 或者hexo generate</span><br><span class="line">$ hexo s # 或者hexo server，可以在http://localhost:4000/ 查看</span><br><span class="line">这里有必要提下Hexo常用的几个命令：</span><br><span class="line"></span><br><span class="line">hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹</span><br><span class="line">hexo server (hexo s) 启动本地web服务，用于博客的预览</span><br><span class="line">hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）</span><br></pre></td></tr></table></figure><p>另外还有其他几个常用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;postName&quot; #新建文章</span><br><span class="line">$ hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">常用简写</span><br><span class="line"></span><br><span class="line">$ hexo n == hexo new</span><br><span class="line">$ hexo g == hexo generate</span><br><span class="line">$ hexo s == hexo server</span><br><span class="line">$ hexo d == hexo deploy</span><br><span class="line">常用组合</span><br><span class="line"></span><br><span class="line">$ hexo d -g #生成部署</span><br><span class="line">$ hexo s -g #生成预览</span><br></pre></td></tr></table></figure><p>现在我们打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 已经可以看到一篇内置的blog了。 </p><p>目前我安装所用的本地环境如下：(可以通过hexo -v查看)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">hexo: 3.2.0</span><br><span class="line">hexo-cli: 1.0.1</span><br><span class="line">os: Windows_NT 6.3.9600 win32 x64</span><br><span class="line">http_parser: 2.5.2</span><br><span class="line">node: 4.4.1</span><br><span class="line">v8: 4.5.103.35</span><br><span class="line">uv: 1.8.0</span><br><span class="line">zlib: 1.2.8</span><br><span class="line">ares: 1.10.1-DEV</span><br><span class="line">icu: 56.1</span><br><span class="line">modules: 46</span><br><span class="line">openssl: 1.0.2g</span><br><span class="line">Hexo主题设置</span><br></pre></td></tr></table></figure><p>这里以主题yilia为例进行说明。</p><p>安装主题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure><p>启用主题<br>修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为yilia。</p><p>更新主题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd themes/yilia</span><br><span class="line">$ git pull</span><br><span class="line">$ hexo g # 生成</span><br><span class="line">$ hexo s # 启动本地web服务器</span><br></pre></td></tr></table></figure><p>现在打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ，会看到我们已经应用了一个新的主题。</p><p>##Github Pages设置</p><p>什么是Github Pages<br>GitHub Pages 本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。</p><p>每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是<code>username/username.github.io</code>，这是特殊的命名约定。你可以通过<code>http://username.github.io</code> 来访问你的个人主页。</p><p>这里特别提醒一下，需要注意的个人主页的网站内容是在master分支下的。</p><p>创建自己的Github Pages<br>注册GitHub及使用Github Pages的过程已经有很多文章讲过，在此不再详述，可以参考：</p><p>在这里我创建了一个github repo叫做 <code>sxsue.github.io</code>. 创建完成之后，需要有一次提交(git commit)操作，然后就可以通过链接<code>http://sxsue.github.io/</code> 访问了。（现在还没有内容，别着急）</p><p>部署Hexo到Github Pages<br>sxsue<br>这一步恐怕是最关键的一步了，让我们把在本地web环境下预览到的博客部署到github上，然后就可以直接通过<code>http://sxsue.github.io/</code>访问了。不过很多教程文章对这个步骤语焉不详，这里着重说下。</p><p>首先需要明白所谓部署到github的原理。</p><p>之前步骤中在Github上创建的那个特别的repo（sxsue.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接<code>http://sxsue.github.io</code>来直接访问。<br><code>Hexo -g</code> 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。<br>需要将hexo生成的静态网站，提交(git commit)到github上。<br>明白了原理，怎么做自然就清晰了。</p><p>使用hexo deploy部署<br>hexo deploy可以部署到很多平台，具体可以参考这个链接. 如果部署到github，需要在配置文件_config.xml中作如下修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:sxsue/sxsue.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">然后在命令行中执行</span><br><span class="line"></span><br><span class="line">hexo d</span><br><span class="line">即可完成部署。</span><br><span class="line"></span><br><span class="line">注意需要提前安装一个扩展：</span><br><span class="line"></span><br><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>##使用git命令行部署<br>不幸的是，上述命令虽然简单方便，但是偶尔会有莫名其妙的问题出现，因此，我们也可以追本溯源，使用git命令来完成部署的工作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">clone github repo</span><br><span class="line">$ cd /hexo/blog</span><br><span class="line"></span><br><span class="line">$ git clone https://github.com/sxsue/sxsue.github.io.git .deploy/sxsue.github.io</span><br></pre></td></tr></table></figure><p>将我们之前创建的repo克隆到本地，新建一个目录叫做.deploy用于存放克隆的代码。</p><p>创建一个deploy脚本文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">cp -R public/* .deploy/sxsue.github.io</span><br><span class="line">cd .deploy/sxsue.github.io</span><br><span class="line">git add .</span><br><span class="line">git commit -m “update”</span><br><span class="line">git push origin master</span><br><span class="line">简单解释一下，hexo generate生成public文件夹下的新内容，然后将其拷贝至sxsue.github.io的git目录下，然后使用git commit命令提交代码到sxsue.github.io这个repo的master branch上。</span><br></pre></td></tr></table></figure><p>需要部署的时候，执行这段脚本就可以了（比如可以将其保存为deploy.sh）。执行过程中可能需要让你输入Github账户的用户名及密码，按照提示操作即可。</p><p>##Hexo 主题配置</p><p>每个不同的主题会需要不同的配置，主题配置文件在主题目录下的<code>_config.yml</code>。<br>以我们使用的yilia主题为例，其提供如下的配置项（theme\yilia_config.yml）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"># Header</span><br><span class="line">menu:</span><br><span class="line">  主页: /</span><br><span class="line">  所有文章: /archives</span><br><span class="line">  # 随笔: /tags/随笔</span><br><span class="line">  </span><br><span class="line"># SubNav</span><br><span class="line">subnav:</span><br><span class="line">  github: &quot;#&quot;</span><br><span class="line">  weibo: &quot;#&quot;</span><br><span class="line">  rss: &quot;#&quot;</span><br><span class="line">  zhihu: &quot;#&quot;</span><br><span class="line">  #douban: &quot;#&quot;</span><br><span class="line">  #mail: &quot;#&quot;</span><br><span class="line">  #facebook: &quot;#&quot;</span><br><span class="line">  #google: &quot;#&quot;</span><br><span class="line">  #twitter: &quot;#&quot;</span><br><span class="line">  #linkedin: &quot;#&quot;</span><br><span class="line"></span><br><span class="line">rss: /atom.xml</span><br><span class="line"></span><br><span class="line"># Content</span><br><span class="line">excerpt_link: more</span><br><span class="line">fancybox: true</span><br><span class="line">mathjax: true</span><br><span class="line"></span><br><span class="line"># Miscellaneous</span><br><span class="line">google_analytics: &apos;&apos;</span><br><span class="line">favicon: /favicon.png</span><br><span class="line"></span><br><span class="line">#你的头像url</span><br><span class="line">avatar: &quot;&quot;</span><br><span class="line">#是否开启分享</span><br><span class="line">share: true</span><br><span class="line">#是否开启多说评论，填写你在多说申请的项目名称 duoshuo: duoshuo-key</span><br><span class="line">#若使用disqus，请在博客config文件中填写disqus_shortname，并关闭多说评论</span><br><span class="line">duoshuo: true</span><br><span class="line">#是否开启云标签</span><br><span class="line">tagcloud: true</span><br><span class="line"></span><br><span class="line">#是否开启友情链接</span><br><span class="line">#不开启——</span><br><span class="line">#friends: false</span><br><span class="line"></span><br><span class="line">#是否开启“关于我”。</span><br><span class="line">#不开启——</span><br><span class="line">#aboutme: false</span><br><span class="line">#开启——</span><br><span class="line">aboutme: 我是谁，我从哪里来，我到哪里去？我就是我，是颜色不一样的吃货…</span><br></pre></td></tr></table></figure><p>##其他高级使用技巧</p><p>绑定独立域名<br>购买域名<br>在你的域名注册提供商那里配置DNS解析，获取GitHub的IP地址点击，进入source目录下，添加CNAME文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cd source/</span><br><span class="line">$ touch CNAME</span><br><span class="line">$ vim CNAME # 输入你的域名</span><br><span class="line">$ git add CNAME</span><br><span class="line">$ git commit -m &quot;add CNAME&quot;</span><br></pre></td></tr></table></figure><p>##使用图床<br>使用七牛云存储<br>自己在github上搭建的图床：<code>http://sxsue.github.io/qiniuimgbed/</code> ，需要首先注册七牛账号使用。</p><p>##添加插件<br>添加sitemap和feed插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-feed</span><br><span class="line">$ npm install hexo-generator-sitemap</span><br></pre></td></tr></table></figure><p>修改_config.yml，增加以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">Plugins:</span><br><span class="line">- hexo-generator-feed</span><br><span class="line">- hexo-generator-sitemap</span><br><span class="line"></span><br><span class="line">#Feed Atom</span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line"></span><br><span class="line">#sitemap</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br></pre></td></tr></table></figure><p>配完之后，就可以访问<code>http://sxsue.github.io/atom.xml</code>和<code>http://sxsue.github.io/sitemap.xml</code>，发现这两个文件已经成功生成了。</p><p>##添加404公益页面<br>GitHub Pages有提供制作404页面的指引：<code>Custom 404 Pages</code>。</p><p>直接在根目录下创建自己的404.html或者404.md就可以。但是自定义404页面仅对绑定顶级域名的项目才起作用，GitHub默认分配的二级域名是不起作用的，使用hexo server在本机调试也是不起作用的。</p><p>推荐使用腾讯公益404。</p><p>##添加about页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page &quot;about&quot;</span><br></pre></td></tr></table></figure><p>之后在<code>\source\about\index.md</code>目录下会生成一个index.md文件，打开输入个人信息即可，如果想要添加版权信息，可以在文件末尾添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;font-size:12px;border-bottom: #ddd 1px solid; BORDER-LEFT: #ddd 1px solid; BACKGROUND: #f6f6f6; HEIGHT: 120px; BORDER-TOP: #ddd 1px solid; BORDER-RIGHT: #ddd 1px solid&quot;&gt;</span><br><span class="line">&lt;div style=&quot;MARGIN-TOP: 10px; FLOAT: left; MARGIN-LEFT: 5px; MARGIN-RIGHT: 10px&quot;&gt;</span><br><span class="line">&lt;IMG alt=&quot;&quot; src=&quot;https://avatars1.githubusercontent.com/u/168751?v=3&amp;s=140&quot; width=90 height=100&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div style=&quot;LINE-HEIGHT: 200%; MARGIN-TOP: 10px; COLOR: #000000&quot;&gt;</span><br><span class="line">本文链接：&lt;a href=&quot;&lt;%= post.link %&gt;&quot;&gt;&lt;%= post.title %&gt;&lt;/a&gt; &lt;br/&gt;</span><br><span class="line">作者： </span><br><span class="line">&lt;a href=&quot;http://sxsue.github.io/&quot;&gt;令狐葱&lt;/a&gt; &lt;br/&gt;出处： </span><br><span class="line">&lt;a href=&quot;http://sxsue.github.io/&quot;&gt;http://sxsue.github.io/&lt;/a&gt;</span><br><span class="line">&lt;br/&gt;本文基于&lt;a target=&quot;_blank&quot; title=&quot;Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)&quot; href=&quot;http://creativecommons.org/licenses/by-sa/4.0/&quot;&gt; 知识共享署名-相同方式共享 4.0 &lt;/a&gt;</span><br><span class="line">国际许可协议发布，欢迎转载，演绎或用于商业目的，但是必须保留本文的署名 </span><br><span class="line">&lt;a href=&quot;http://sxsue.github.io/&quot;&gt;令狐葱&lt;/a&gt;及链接。</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>##添加Fork me on Github<br>获取代码，选择你喜欢的代码添加到hexo/themes/yilia/layout/layout.ejs的末尾即可，注意要将代码里的you改成你的Github账号名。</p><p>##添加支付宝捐赠按钮及二维码支付<br>支付宝捐赠按钮<br>在<code>\hexo\themes\yilia\layout_widget</code>目录下新建一个zhifubao.ejs文件，内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;p class=&quot;asidetitle&quot;&gt;打赏他&lt;/p&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;form action=&quot;https://shenghuo.alipay.com/send/payment/fill.htm&quot; method=&quot;POST&quot; target=&quot;_blank&quot; accept-charset=&quot;GBK&quot;&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;input name=&quot;optEmail&quot; type=&quot;hidden&quot; value=&quot;your 支付宝账号&quot; /&gt;</span><br><span class="line">    &lt;input name=&quot;payAmount&quot; type=&quot;hidden&quot; value=&quot;默认捐赠金额(元)&quot; /&gt;</span><br><span class="line">    &lt;input id=&quot;title&quot; name=&quot;title&quot; type=&quot;hidden&quot; value=&quot;博主，打赏你的！&quot; /&gt;</span><br><span class="line">    &lt;input name=&quot;memo&quot; type=&quot;hidden&quot; value=&quot;你Y加油，继续写博客！&quot; /&gt;</span><br><span class="line">    &lt;input name=&quot;pay&quot; type=&quot;image&quot; value=&quot;转账&quot; src=&quot;http://7xig3q.com1.z0.glb.clouddn.com/alipay-donate-website.png&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>添加完该文件之后，要在<code>/hexo/themes/yilia/_config.yml</code>文件中启用，如下所示，添加zhifubao</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">widgets:</span><br><span class="line">- category</span><br><span class="line">- tag</span><br><span class="line">- links</span><br><span class="line">- tagcloud</span><br><span class="line">- zhifubao</span><br><span class="line">- rss</span><br></pre></td></tr></table></figure><p>##二维码捐赠<br>首先需要到<a href="https://qr.alipay.com/paipai/open.htm" target="_blank" rel="noopener">这里</a>获取你的支付宝账户的二维码图片，支付宝提供了自定义功能，可以添加自定义文字。</p><p>我的二维码扫描捐赠添加在about页面，当然你也可以添加到其它页面，在<code>\hexo\blog\source\about</code>下有<code>index.md</code>，打开，在适当位置添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;center&gt;</span><br><span class="line">欢迎您捐赠本站，您的支持是我最大的动力！</span><br><span class="line">![][http://7xsxyo.com1.z0.glb.clouddn.com/2016/04/15/FoJ1F6Ht0CNaYuCdE2l52F-Fk9Vk202.png]</span><br><span class="line">&lt;/center&gt;</span><br><span class="line">&lt;br/&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;center&gt;</code>可以让图片居中显示，注意将图片链接地址换成你的即可。</p><p>##添加百度站内搜索<br><a href="http://zhanzhang.baidu.com/guide/index" target="_blank" rel="noopener">点击进入</a>，点击其它工具-&gt;站内检索-&gt;现在使用-&gt;新建搜索引擎-&gt;查看代码，将代码里的id值复制，打开<code>/hexo/themes/jacman/_config.xml</code>，配置成如下即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">baidu_search:     ## http://zn.baidu.com/</span><br><span class="line">  enable: true</span><br><span class="line">  id: &quot;1433674487421172828&quot; ## e.g. &quot;783281470518440642&quot;  for your baidu search id</span><br><span class="line">  site: http://zhannei.baidu.com/cse/search ## your can change to your site instead of the default site</span><br></pre></td></tr></table></figure><p>##使用不蒜子添加访客统计<br>详情参考搞定你的网站计数，具体做法很简单，就是在你的themes/your themes/layout/_partial/footer.ejs底部加入这段脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>然后在<code>&lt;p class=&quot;copyright&quot;&gt;&lt;/p&gt;</code>中间添加如下统计信息即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本站总访问量 &lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt; 次, 访客数 &lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt; 人次, 本文总阅读量 &lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt; 次</span><br></pre></td></tr></table></figure><p>不蒜子的官方服务网站是不蒜子，目前最大的弊端就是不开放注册，所以对于运行了一段时间的网站，不蒜子的数据都是从1开始，没办法设置，只有等后期开放注册之后，登入网站才能对统计计数进行设置。</p><p>###Hexo主题</p><p><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">Next</a></p><p><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">Yilia</a></p><p><a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="noopener">Maupassant</a></p><p><a href="https://github.com/MOxFIVE/hexo-theme-yelee" target="_blank" rel="noopener">Yelee</a></p><p><a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak" target="_blank" rel="noopener">Tranguilpeak</a></p><p><a href="https://github.com/Kaijun/hexo-theme-huxblog" target="_blank" rel="noopener">Huxbloh</a></p><p><a href="https://github.com/CodeDaraW/Hacker" target="_blank" rel="noopener">Hacker</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##系统环境配置&lt;/p&gt;
&lt;p&gt;要使用Hexo，需要在你的系统中支持Nodejs以及Git&lt;/p&gt;
&lt;p&gt;安装Node.js&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew install nodejs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装Git&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew install git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://iiooio.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Mac 搭建Nginx+Rtmp服务器</title>
    <link href="http://iiooio.com/blog/Mac%20%E6%90%AD%E5%BB%BANginx+Rtmp%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://iiooio.com/blog/Mac 搭建Nginx+Rtmp服务器/</id>
    <published>2016-07-20T00:21:34.000Z</published>
    <updated>2018-04-18T12:58:10.974Z</updated>
    
    <content type="html"><![CDATA[<p>#Mac 搭建Nginx+Rtmp服务器</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Mac安装RTMP服务器过程</p><h2 id="一、安装Homebrew"><a href="#一、安装Homebrew" class="headerlink" title="一、安装Homebrew"></a>一、安装Homebrew</h2><p>执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><p>如果已经安装过，而想要卸载：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)&quot;</span><br></pre></td></tr></table></figure><h2 id="二、安装nginx"><a href="#二、安装nginx" class="headerlink" title="二、安装nginx"></a>二、安装nginx</h2><p>执行安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx-full --with-rtmp-module</span><br></pre></td></tr></table></figure><p>通过操作以上步骤，nginx和rtmp模块就安装好了</p><h2 id="三、运行nginx"><a href="#三、运行nginx" class="headerlink" title="三、运行nginx"></a>三、运行nginx</h2><p>执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure><p>出现Nginx页面信息，表示nginx服务器搭建成功了，而且已经安装了RTMP模块了。</p><h2 id="四、配置nginx和rtmp"><a href="#四、配置nginx和rtmp" class="headerlink" title="四、配置nginx和rtmp"></a>四、配置nginx和rtmp</h2><p>下面开始来配置nginx的rtmp模块。首先，我们要看看nginx安装到哪里了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew info nginx-full</span><br></pre></td></tr></table></figure><p>出现如下类似信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">==&gt; Caveats</span><br><span class="line">Docroot is: /usr/local/var/www</span><br><span class="line"></span><br><span class="line">The default port has been set in /usr/local/etc/nginx/nginx.conf to 8080 so that</span><br><span class="line">nginx can run without sudo.</span><br><span class="line"></span><br><span class="line">nginx will load all files in /usr/local/etc/nginx/servers/.</span><br><span class="line"></span><br><span class="line">- Tips -</span><br><span class="line">Run port 80:</span><br><span class="line"> $ sudo chown root:wheel /usr/local/Cellar/nginx-full/1.10.1/bin/nginx</span><br><span class="line"> $ sudo chmod u+s /usr/local/Cellar/nginx-full/1.10.1/bin/nginx</span><br><span class="line">Reload config:</span><br><span class="line"> $ nginx -s reload</span><br><span class="line">Reopen Logfile:</span><br><span class="line"> $ nginx -s reopen</span><br><span class="line">Stop process:</span><br><span class="line"> $ nginx -s stop</span><br><span class="line">Waiting on exit process</span><br><span class="line"> $ nginx -s quit</span><br><span class="line"></span><br><span class="line">To have launchd start homebrew/nginx/nginx-full now and restart at login:</span><br><span class="line">  brew services start homebrew/nginx/nginx-full</span><br><span class="line">Or, if you don&apos;t want/need a background service you can just run:</span><br><span class="line">  nginx</span><br></pre></td></tr></table></figure><p>从这些信息中，可以看到nginx.conf文件在：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>nginx完整路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/Cellar/nginx-full/1.10.1/bin/nginx</span><br></pre></td></tr></table></figure><p>通过以下打开nginx.conf配置文件来配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>直接滚动到最后一行，以就是在http {} 之后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//在http节点后面加上rtmp配置：</span><br><span class="line">rtmp &#123;</span><br><span class="line">  server &#123;</span><br><span class="line">      listen 1935;</span><br><span class="line"></span><br><span class="line">    #直播流配置</span><br><span class="line">      application rtmplive &#123;</span><br><span class="line">          live on;</span><br><span class="line">          record off;</span><br><span class="line">          #为 rtmp 引擎设置最大连接数。默认为 off</span><br><span class="line">          max_connections 1024;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">      application hls&#123;</span><br><span class="line">          live on;</span><br><span class="line">          hls on;</span><br><span class="line">          hls_path /usr/local/var/www/hls;</span><br><span class="line">          hls_fragment 1s;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>重启nginx：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/Cellar/nginx-full/1.10.0/bin/nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="五、安装ffmpeg"><a href="#五、安装ffmpeg" class="headerlink" title="五、安装ffmpeg"></a>五、安装ffmpeg</h2><p>输入以下命令来安装ffmpeg：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install ffmpeg</span><br></pre></td></tr></table></figure><p>安装这个需要等一段时间，然后准备一个视频文件作为来推流，我们在安装一个支持rtmp协议的视频播放器，Mac下可以用VLC。</p><h2 id="六、ffmpeg推流"><a href="#六、ffmpeg推流" class="headerlink" title="六、ffmpeg推流"></a>六、ffmpeg推流</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -re -i /Users/vvusu/Desktop/test.mov -vcodeclibx264 -acodec aac -f flv rtmp://localhost:5920/rtmplive/room</span><br><span class="line"></span><br><span class="line">ffmpeg -loglevel verbose -re -i Desktop/1.mp4 -vcodec libx264 -vprofile baseline -acodec libmp3lame -ar 44100 -ac 1 -f flv rtmp://127.0.0.1:1935/hls/movie</span><br></pre></td></tr></table></figure><p>将视频推流到服务器后，打开VLC，然后file-&gt;open network-&gt;输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rtmp://localhost:5920/rtmplive/room</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#Mac 搭建Nginx+Rtmp服务器&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Mac安装RTMP服务器过程&lt;/p&gt;
&lt;h2 id=&quot;一、安装Homebrew&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="Mac" scheme="http://iiooio.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Mac_部署MongoDB</title>
    <link href="http://iiooio.com/blog/Mac%20%E9%83%A8%E7%BD%B2MongoDB/"/>
    <id>http://iiooio.com/blog/Mac 部署MongoDB/</id>
    <published>2016-06-28T00:21:34.000Z</published>
    <updated>2018-04-18T12:32:00.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac-部署MongoDB"><a href="#Mac-部署MongoDB" class="headerlink" title="Mac_部署MongoDB"></a>Mac_部署MongoDB</h1><p>1.安装<br>brew install mongodb</p><p>第一次启动服务端,这里需要做一些准备工作.</p><p>1.默认mongodb 数据文件是放到根目录 data/db 文件夹下,如果没有这个文件,请自行创建.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/db</span><br></pre></td></tr></table></figure><p>2.如果你当前的环境变量还没有加入 mongod  ,手动添加的环境变量中.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano ~/.bash_profile</span><br></pre></td></tr></table></figure><p>添加mongodb安装目录到环境变量中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/usr/local/Cellar/mongodb/2.4.9/bin:$&#123;PATH&#125;&#125;</span><br></pre></td></tr></table></figure><p>3.如果让环境变量马上生效? 执行下面的shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>4.修改mongodb配置文件,配置文件默认在<code>/usr/local/etc</code> 下的 <code>mongod.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">destination: file</span><br><span class="line">path: /usr/local/var/log/mongodb/mongo.log</span><br><span class="line">logAppend: true</span><br><span class="line">storage:</span><br><span class="line">dbPath: /data/db</span><br><span class="line">net:</span><br><span class="line">bindIp: 127.0.0.1</span><br></pre></td></tr></table></figure><p>第二行修改成数据库文件写入目录地址,如果准备连接非本地环境的mongodb数据库时,<code>bind_ip = 0.0.0.0</code> 即可.</p><p>5.尝试启动 mongod<br><img src="http://okxu47wpt.bkt.clouddn.com/14760939433764.jpg" alt="14760939433764"></p><p>好吧,万事开头难,mongodb 服务器没有启动起来,看最后一行错误提示已经退出,google 后得知是因为 /data/db 文件没有写入权限.</p><p>6.给 /data/db 文件夹赋权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown `id -u` /data/db</span><br></pre></td></tr></table></figure><p>ok,这一句搞定,继续尝试启动服务器端<br><img src="http://okxu47wpt.bkt.clouddn.com/14760940044663.jpg" alt="14760940044663"></p><p>ok,mongodb 服务端终于启动起来了.接着启动mongodb 客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/etc$ mongo</span><br></pre></td></tr></table></figure><p><img src="http://okxu47wpt.bkt.clouddn.com/14760940300462.jpg" alt="14760940300462"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mac-部署MongoDB&quot;&gt;&lt;a href=&quot;#Mac-部署MongoDB&quot; class=&quot;headerlink&quot; title=&quot;Mac_部署MongoDB&quot;&gt;&lt;/a&gt;Mac_部署MongoDB&lt;/h1&gt;&lt;p&gt;1.安装&lt;br&gt;brew install mongo
      
    
    </summary>
    
    
      <category term="Mac" scheme="http://iiooio.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>iOS_国际化</title>
    <link href="http://iiooio.com/blog/iOS_%E5%9B%BD%E9%99%85%E5%8C%96/"/>
    <id>http://iiooio.com/blog/iOS_国际化/</id>
    <published>2016-05-03T08:21:34.000Z</published>
    <updated>2018-04-18T12:32:00.013Z</updated>
    
    <content type="html"><![CDATA[<p>#iOS_国际化</p><h2 id="1-创建一个新应用"><a href="#1-创建一个新应用" class="headerlink" title="1. 创建一个新应用"></a>1. 创建一个新应用</h2><p>在Xcode的Single Application View模版中，Xcode对English做了本地化。</p><p>国际化了两个文件：Main.storyboard和LaunchScreen.storyboard<br><img src="http://okxu47wpt.bkt.clouddn.com/14778920245688_1.png" alt="14778920245688_1"></p><h2 id="2-开始国际化"><a href="#2-开始国际化" class="headerlink" title="2. 开始国际化"></a>2. 开始国际化</h2><p>选中project，在上图的Localizations选项下，添加简体中文；Xcode会询问你是否国际化以下文件，这个地方并不重要，因为项目中所有的资源文件都可以很方便的国际化和去国际化。</p><p>观察一下有哪些文件是可以国际化的：</p><ul><li>xib和storyboard资源文件；</li><li>info.plist文件</li><li>strings文件等等</li></ul><p>简而言之，除了代码文件和xcassets，都可以国际化。</p><h2 id="3-国际化代码中的文本"><a href="#3-国际化代码中的文本" class="headerlink" title="3. 国际化代码中的文本"></a>3. 国际化代码中的文本</h2><p>国际化是基于.strings文件的，该文件的内容只是简单的key value对，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;KEY1&quot; = &quot;CONTENT1&quot;; </span><br><span class="line">&quot;KEY2&quot; = &quot;CONTENT2&quot;;</span><br></pre></td></tr></table></figure><p>其中Localizable和InfoPlist两个strings文件尤为重要，前者在这一小节介绍，后者在<code>国际化info.plist</code>中介绍。</p><p>如果你在.m文件中，使用代码的方式设置按钮的title，可以使用NSLocalizedString宏定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define NSLocalizedString(key, comment)  </span><br><span class="line">[[NSBundle mainBundle] localizedStringForKey:(key) value:@&quot;&quot; table:nil]</span><br></pre></td></tr></table></figure><p>该方法会在Localizable.strings中查找key对应的value。</p><hr><p>完整处理过程：</p><ol><li>新建Localizable.strings文件；</li><li>打开右侧file inspector，打开Localization选项，选中Base和中文简体；</li><li>如下，Localizable.strings文件就会从一个文件变成两个文件，编译各种语言对应的文件即可；</li><li>在代码中使用NSLocalizedString(key, nil)，key为Localizable.strings中的key。</li></ol><p><img src="http://okxu47wpt.bkt.clouddn.com/14778920245688_2.png" alt="14778920245688_2"></p><p>注释：NSLocalizedString宏定义中的comment参数并没有实际意义。</p><h2 id="4-国际化storyboard和xib文件"><a href="#4-国际化storyboard和xib文件" class="headerlink" title="4. 国际化storyboard和xib文件"></a>4. 国际化storyboard和xib文件</h2><p>国际化storyboard和xib文件国际化也是在file inspector的Localization中。</p><p>国际化的结果就是在Xcode中可以看到一个文件变成了对应的两个文件。</p><p><img src="http://okxu47wpt.bkt.clouddn.com/14778920245688_3.png" alt="14778920245688_3"></p><p>再观察一下目录结构：</p><p>Base.lproj:</p><p><img src="http://okxu47wpt.bkt.clouddn.com/14778920245688_4.png" alt="14778920245688_4"></p><p>en.lproj:</p><p><img src="http://okxu47wpt.bkt.clouddn.com/14778920245688_5.png" alt="14778920245688_5"></p><p>这类资源文件，Xcode的处理方式是，原文件放在Base中，在其它语言版本中只有一个对应文件名的strings文件，再看一下LaunchScreen,strings的部分内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/* Class = &quot;UILabel&quot;; text = &quot;Detail view content goes here&quot;; ObjectID = &quot;0XM-y9-sOw&quot;; */</span><br><span class="line">&quot;0XM-y9-sOw.text&quot; = &quot;Detail view content goes here&quot;;</span><br><span class="line"></span><br><span class="line">/* Class = &quot;UITableViewController&quot;; title = &quot;Master&quot;; ObjectID = &quot;7bK-jq-Zjz&quot;; */</span><br><span class="line">&quot;7bK-jq-Zjz.title&quot; = &quot;Master&quot;;</span><br></pre></td></tr></table></figure><p>其中的ObjectID是什么？</p><p>用source code的方式，打开LaunchScreen.storyboard，全局搜索一下 0XM-y9-sOw，结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;label clipsSubviews=&quot;YES&quot; userInteractionEnabled=&quot;NO&quot; contentMode=&quot;scaleToFill&quot; text=&quot;Detail view content goes here&quot; textAlignment=&quot;center&quot; lineBreakMode=&quot;tailTruncation&quot; minimumFontSize=&quot;10&quot; translatesAutoresizingMaskIntoConstraints=&quot;NO&quot; id=&quot;0XM-y9-sOw&quot;&gt;</span><br></pre></td></tr></table></figure><p>ObjectID是原文件中对应的对象。</p><h2 id="5-国际化info-plist"><a href="#5-国际化info-plist" class="headerlink" title="5. 国际化info.plist"></a>5. 国际化info.plist</h2><p>按照上面的思路，国际化一下info.plist，然后编译，碰到了什么问题？</p><p>Xcode找不到info.plist。</p><p>因为通过file inspector的Localization，Xcode会创建两个info.plist分别放在Base.lproj和zh-Hans.lproj文件夹下。</p><p>还记得上面没讲的<code>InfoPlist.strings</code>吗？</p><hr><p>处理过程：</p><ol><li>新建一个<code>InfoPlist.strings</code>文件；</li><li>Localization该文件；</li><li>编辑对应语言的InfoPlist.strings文件即可。比如，英文版本应用名叫English，中文版本叫中文，如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&quot;CFBundleDisplayName&quot; = &quot;English&quot;;</span><br><span class="line"></span><br><span class="line">和</span><br><span class="line"></span><br><span class="line">&quot;CFBundleDisplayName&quot; = &quot;中文&quot;;</span><br></pre></td></tr></table></figure><h2 id="7-练习：国际化音频文件"><a href="#7-练习：国际化音频文件" class="headerlink" title="7. 练习：国际化音频文件"></a>7. 练习：国际化音频文件</h2><p>以下是必要步骤的简单描述：</p><ol><li>把音频文件A拷贝到项目中。</li><li>打开音频文件inspector，选择本地化按钮，选择了Base和简体中文作为支持语言。</li><li>重命名第二个音频文件B，和第一个名字A一样，然后将其拷贝到es.lproj文件夹。</li><li>确保你在Finder提示中选择了“Replace File”。</li></ol><h2 id="9-国际化与多target问题"><a href="#9-国际化与多target问题" class="headerlink" title="9. 国际化与多target问题"></a>9. 国际化与多target问题</h2><p>问题描述：<br>我们应用有4个分身（4个相似的app），同时还做了国际化，此时我就迷茫了！四个应用有a,b,c,d四个info.plist文件名，但是国际化info.plist的文件名都是InfoPlist.strings。。。</p><p>解决办法：</p><ol><li>创建四个文件夹；</li><li>在四个文件夹中分别创建一个InfoPlist.strings；</li><li>4个InfoPlist.strings关联到不同target。OK啦～</li></ol><p><img src="http://okxu47wpt.bkt.clouddn.com/14778920245688_6.jpg" alt="14778920245688_6"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#iOS_国际化&lt;/p&gt;
&lt;h2 id=&quot;1-创建一个新应用&quot;&gt;&lt;a href=&quot;#1-创建一个新应用&quot; class=&quot;headerlink&quot; title=&quot;1. 创建一个新应用&quot;&gt;&lt;/a&gt;1. 创建一个新应用&lt;/h2&gt;&lt;p&gt;在Xcode的Single Applicatio
      
    
    </summary>
    
    
      <category term="iOS" scheme="http://iiooio.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 安装Python3.5</title>
    <link href="http://iiooio.com/blog/CentOS7_%E5%AE%89%E8%A3%85Python3.5/"/>
    <id>http://iiooio.com/blog/CentOS7_安装Python3.5/</id>
    <published>2016-04-26T06:20:37.000Z</published>
    <updated>2018-04-18T15:02:08.309Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CentOS7-安装Python3-5"><a href="#CentOS7-安装Python3-5" class="headerlink" title="CentOS7 安装Python3.5"></a>CentOS7 安装Python3.5</h1><p>安装步骤</p><ol><li>编译环境准备<br>准备一下编译环境，防止出现安装错误</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall &apos;Development Tools&apos;</span><br><span class="line">yum install zlib-devel bzip2-devel openssl-devel ncurese-devel</span><br></pre></td></tr></table></figure><ol start="2"><li>下载python3.5代码包<br>这里选择下载最近版本的Python3.5.1 (2016-05)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.5.1/Python-3.5.1.tar.xz</span><br></pre></td></tr></table></figure><ol start="3"><li>编译</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar Jxvf Python-3.5.1.tar.xz</span><br><span class="line">cd Python-3.5.1</span><br><span class="line">./configure --prefix=/usr/local/python3</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>Python3.5.1 安装编译安装时会默认安装 pip 如果出现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ignoring ensurepip failure: pip 1.5.6 requires SSL/TLS</span><br></pre></td></tr></table></figure><p>未安装编译环境，重新安装该编译环境并重新编译 Python3.5.1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install zlib-devel bzip2-devel openssl-devel ncurese-devel</span><br></pre></td></tr></table></figure><ol start="4"><li>更换系统默认 Python 版本<br>备份旧版本 Python</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /usr/bin/python usr/bin/python2.7</span><br></pre></td></tr></table></figure><p>新建指向新版本 Python 以及 pip 的软连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/python3/bin/python3.5 /usr/bin/python</span><br><span class="line">ln -s /usr/local/python3/bin/pip3 /usr/bin/pip</span><br></pre></td></tr></table></figure><p>检验 Python 及 pip 版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -V</span><br><span class="line">pip -V</span><br></pre></td></tr></table></figure><p>5.更新 yum 相关设置<br>因 yum 的功能依赖 Python2 更改默认 Python版本后会导致 yum无法正常工作<br>执行以下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/bin/yum</span><br></pre></td></tr></table></figure><p>打开文件，修改第一行为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7</span><br></pre></td></tr></table></figure><p>若执行 yum 时出现以下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File &quot;/usr/libexec/urlgrabber-ext-down&quot;, line 28</span><br></pre></td></tr></table></figure><p>执行以下更改,打开该文件并修改首行为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7</span><br></pre></td></tr></table></figure><ol start="6"><li>其他<br>执行 yum 时，若出现以下 Error:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Delta RPMs disabled because /usr/bin/applydeltarpm not installed.</span><br></pre></td></tr></table></figure><p>执行以下安装可解决：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install deltarpm</span><br></pre></td></tr></table></figure><p>版本共存<br>如果你希望同时使用多版本 Python ，例如在保持系统原有版本 Python2.x 不变的情况下使用 Python 3.x,可以考虑使用 virtualenv 构建合适版本的虚拟环境：</p><h1 id="python2-7-环境下搭建-python3-x-环境"><a href="#python2-7-环境下搭建-python3-x-环境" class="headerlink" title="python2.7 环境下搭建 python3.x 环境"></a>python2.7 环境下搭建 python3.x 环境</h1><p>#安装 pip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install python-setuptools</span><br><span class="line">easy_install pip</span><br></pre></td></tr></table></figure><p>#安装virtualenv</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv</span><br></pre></td></tr></table></figure><p>#在当前文件夹下构建虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv -p /usr/local/python3/bin/python3 venv</span><br></pre></td></tr></table></figure><p>#启动虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source venv/bin/activate</span><br></pre></td></tr></table></figure><p>#退出虚拟环境<br>deactivate<br>virtualenv 详细使用说明，参见 <a href="https://virtualenv.pypa.io/en/latest/index.html" target="_blank" rel="noopener">Virtualenv</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CentOS7-安装Python3-5&quot;&gt;&lt;a href=&quot;#CentOS7-安装Python3-5&quot; class=&quot;headerlink&quot; title=&quot;CentOS7 安装Python3.5&quot;&gt;&lt;/a&gt;CentOS7 安装Python3.5&lt;/h1&gt;&lt;p&gt;安装
      
    
    </summary>
    
    
      <category term="CentOS" scheme="http://iiooio.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>Centos7 SS-Panel</title>
    <link href="http://iiooio.com/blog/Centos7_SS-Panel/"/>
    <id>http://iiooio.com/blog/Centos7_SS-Panel/</id>
    <published>2015-12-11T03:20:37.000Z</published>
    <updated>2018-04-18T13:02:10.639Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Centos7-SS-Panel"><a href="#Centos7-SS-Panel" class="headerlink" title="Centos7 SS-Panel"></a>Centos7 SS-Panel</h1><h4 id="ss-panel与manyuser搭建ss前端与后端"><a href="#ss-panel与manyuser搭建ss前端与后端" class="headerlink" title="ss-panel与manyuser搭建ss前端与后端"></a>ss-panel与manyuser搭建ss前端与后端</h4><h5 id="Step-0"><a href="#Step-0" class="headerlink" title="Step 0"></a>Step 0</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/orvice/ss-panel.git</span><br></pre></td></tr></table></figure><h5 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -sS https://getcomposer.org/installer | php</span><br><span class="line">$ php composer.phar  install</span><br></pre></td></tr></table></figure><h5 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp .env.example .env</span><br></pre></td></tr></table></figure><p>then edit .env</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 storage</span><br></pre></td></tr></table></figure><h5 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h5><p>Import the sql to you mysql database.</p><h5 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h5><p>Nginx Config example:</p><p>if you download ss-panel on path /home/www/ss-panel</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root /home/www/ss-panel/public;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">    try_files $uri $uri/ /index.php$is_args$args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>ss-panel v3 配置说明，请根据说明合理选择密码加密方式，认证方式等。</p><p>修改站点以及数据库配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .env</span><br></pre></td></tr></table></figure><h5 id="Auth-Driver-认证设置"><a href="#Auth-Driver-认证设置" class="headerlink" title="Auth Driver 认证设置"></a>Auth Driver 认证设置</h5><p>ss-panel v3支持多种存储用户认证信息的方式：</p><p>cookie 同v2的认证方式，不推荐。<br>redis 使用Redis存储，推荐此方式。<br>推荐使用redis</p><h5 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install redis-server</span><br></pre></td></tr></table></figure><h5 id="密码加密方式"><a href="#密码加密方式" class="headerlink" title="密码加密方式"></a>密码加密方式</h5><p>md5 不推荐<br>sha256 推荐</p><h5 id="添加管理员"><a href="#添加管理员" class="headerlink" title="添加管理员"></a>添加管理员</h5><p>在网站根目录下执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php xcat createAdmin</span><br></pre></td></tr></table></figure><p>根据提示创建管理员帐号。</p><p>创建成功后登录可以在/admin进行管理。</p><p>重置流量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php xcat resetTraffic</span><br></pre></td></tr></table></figure><h4 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h4><p>虚拟主机配置文件例子；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    try_files $uri $uri/ /index.php$is_args$args;</span><br><span class="line">&#125;</span><br><span class="line">location ~ \.php &#123;</span><br><span class="line">    try_files $uri =404;</span><br><span class="line">    fastcgi_split_path_info ^(.+\.php)(/.+)$;</span><br><span class="line">    include fastcgi_params;</span><br><span class="line">    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">    fastcgi_param SCRIPT_NAME $fastcgi_script_name;</span><br><span class="line">    fastcgi_index index.php;</span><br><span class="line">    fastcgi_pass 127.0.0.1:9004;</span><br><span class="line">&#125;</span><br><span class="line">location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|flv|ico)$ &#123;</span><br><span class="line">    expires 30d;</span><br><span class="line">    access_log off;</span><br><span class="line">    &#125;</span><br><span class="line">location ~ .*\.(js|css)?$ &#123;</span><br><span class="line">    expires 7d;</span><br><span class="line">    access_log off;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在主机上运行fastcgi</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php-cgi -b 127.0.0.1:9004</span><br></pre></td></tr></table></figure><h4 id="停用系统防火墙"><a href="#停用系统防火墙" class="headerlink" title="停用系统防火墙"></a>停用系统防火墙</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop iptables</span><br><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><h4 id="安装Manyuser"><a href="#安装Manyuser" class="headerlink" title="安装Manyuser"></a>安装Manyuser</h4><p>项目地址：<a href="https://github.com/mengskysama/shadowsocks-rm/tree/manyuser" target="_blank" rel="noopener">https://github.com/mengskysama/shadowsocks-rm/tree/manyuser</a></p><h6 id="1、先安装需要的环境依赖"><a href="#1、先安装需要的环境依赖" class="headerlink" title="1、先安装需要的环境依赖"></a>1、先安装需要的环境依赖</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Debian / Ubuntu:</span><br><span class="line">apt-get install python-pip python-m2crypto</span><br></pre></td></tr></table></figure><p>CentOS:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install m2crypto python-setuptools</span><br><span class="line">easy_install pip</span><br></pre></td></tr></table></figure><h6 id="2、安装cymysql"><a href="#2、安装cymysql" class="headerlink" title="2、安装cymysql"></a>2、安装cymysql</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install cymysql</span><br></pre></td></tr></table></figure><h6 id="3、安装shadowsocks-manyuser"><a href="#3、安装shadowsocks-manyuser" class="headerlink" title="3、安装shadowsocks-manyuser"></a>3、安装shadowsocks-manyuser</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git clone -b manyuser https://github.com/mengskysama/shadowsocks.git</span><br><span class="line">或者git clone -b manyuser https://github.com/mengskysama/shadowsocks-rm.git</span><br><span class="line">SSR第三方版git clone -b manyuser https://github.com/breakwa11/shadowsocks.git</span><br><span class="line"></span><br><span class="line">多用户版配置在第一层ss目录下</span><br><span class="line">如果提示没有安装git，则先安装git</span><br><span class="line"></span><br><span class="line">yum -y install git</span><br></pre></td></tr></table></figure><p>通过phpmyadmin创建数据库shadowsocks（名称随意），然后将shadowsocks-manyuser文件夹中的shadowsocks.sql导入到你创建的数据库中。</p><h6 id="4、配置数据库连接"><a href="#4、配置数据库连接" class="headerlink" title="4、配置数据库连接"></a>4、配置数据库连接</h6><p>cd /用户名/shadowsocks/shadowsocks 打开Config.py所在文件夹</p><p>编辑Config.py文件：vi Config.py，修改对应的端口、密码等等操作。如下格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># Config</span><br><span class="line">MYSQL_HOST = &apos;127.0.0.1&apos; #这一行是服务器IP，127.0.0.1表示本机</span><br><span class="line">MYSQL_PORT = 3306 #数据库端口号</span><br><span class="line">MYSQL_USER = &apos;ss&apos; #数据库用户名</span><br><span class="line">MYSQL_PASS = &apos;ss&apos; #数据库密码</span><br><span class="line">MYSQL_DB = &apos;shadowsocks&apos; #数据库名称</span><br><span class="line"></span><br><span class="line">MANAGE_PASS = &apos;ss233333333&apos;</span><br><span class="line"></span><br><span class="line"># if you want manage in other server you should set this value to global ip</span><br><span class="line"></span><br><span class="line">MANAGE_BIND_IP = &apos;127.0.0.1&apos;</span><br><span class="line"></span><br><span class="line"># make sure this port is idle</span><br><span class="line"></span><br><span class="line">MANAGE_PORT = 23333</span><br></pre></td></tr></table></figure><h6 id="5、开启服务"><a href="#5、开启服务" class="headerlink" title="5、开启服务"></a>5、开启服务</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python server.py</span><br></pre></td></tr></table></figure><p>如果放在后台运行则可以，nohup python server.py &amp;<br>nohup用法可以百度，也可以用screen或者配置supervisor进程守护。我是centos用的screen，方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">screen -S shadowsocks</span><br><span class="line">cd /root/shadowsocks/shadowsocks/</span><br><span class="line">python server.py</span><br></pre></td></tr></table></figure><p>此时按住Ctrl+a，然后按d退出就可以了。<br>查看screen运行任务可以screen -ls可以看到刚才创建的ss任务在运行。<br>如果需要恢复执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -r shadowsocks</span><br></pre></td></tr></table></figure><p>当然，出意外的话killall也是可以。</p><h6 id="Shadowsocks开机自动启动并后台运行"><a href="#Shadowsocks开机自动启动并后台运行" class="headerlink" title="Shadowsocks开机自动启动并后台运行"></a>Shadowsocks开机自动启动并后台运行</h6><p>vi /etc/rc.local<br>用vi编辑器添加以下内容（先按键盘Ins键，切换到编辑模式）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root/shadowsocks/shadowsocks</span><br><span class="line">screen -dmS Shadowsocks python server.py</span><br></pre></td></tr></table></figure><p>然后Esc退出编辑，Shift+;打出英文半角冒号，然后wq，回车，保存文件。<br>（screen -dmS Shadowsocks python server.py，也就是让程序运行后就在后台了。）<br>至此多用户SS后端安装完毕。</p><p>debian下使用supervisor进程守护的方法<br>安装supervisor<br>apt-get install supervisor<br>配置supervisor进程守护<br>在目录/etc/supervisor/conf.d/下， 新建一个文件，名字：shadowsocks.conf<br>在shadowsocks.conf文件里编辑添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[program:shadowsocks]</span><br><span class="line">command=python /root/shadowsocks/shadowsocks/server.py -c /root/shadowsocks/shadowsocks/config.json #/此处目录请自行修改</span><br><span class="line">autorestart=true</span><br><span class="line">user=root</span><br></pre></td></tr></table></figure><p>修改以下文件<br>/etc/profile<br>/etc/default/supervisor<br>在文件结尾处添加以下3行内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ulimit -n 51200</span><br><span class="line">ulimit -Sn 4096</span><br><span class="line">ulimit -Hn 8192</span><br></pre></td></tr></table></figure><p>启动supervisor<br>service supervisor start #启动<br>supervisorctl reload #重载<br>debug查看连接日志等<br>supervisorctl tail -f shadowsocks stderr #Ctrl+C 取消查看</p><h6 id="centos使用supervisor"><a href="#centos使用supervisor" class="headerlink" title="centos使用supervisor"></a>centos使用supervisor</h6><p>安装easy_install supervisor<br>运行echo_supervisord_conf测试是否安装成功。<br>创建配置文件：<br>echo_supervisord_conf &gt; /etc/supervisord.conf<br>修改配置文件：<br>在supervisord.conf最后增加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[program:shadowsocks]</span><br><span class="line">command = python /root/shadowsocks/shadowsocks/server.py -c /root/shadowsocks/shadowsocks/config.json</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">startsecs=3</span><br></pre></td></tr></table></figure><p>使用指定配置文件启动：/usr/bin/supervisord -c /etc/supervisord.conf/<br>-c 表示配置文件的路径，读取这里个配置文件，之前也是可以根据自己的情况放在不同的文件夹下<br>修改配置文件之后：supervisorctl reload 重载 服务重新启动<br>debug查看连接日志：supervisorctl tail -f shadowsocks stderr #Ctrl+C 取消查看<br>设置supervisord开机启动<br>编辑文件：vi /etc/rc.local<br>在末尾另起一行添加supervisord，保存退出（和上文类似）。<br>另centos7还需要为rc.local添加执行权限<br>chmod +x /etc/rc.local<br>至此运用supervisord控制shadowsocks开机自启和后台运行设置完成<br>常用命令<br>控制命令基本都通过supervisorctl执行，输入help可以看到命令列表。这是一些常用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">获得所有程序状态 supervisorctl status</span><br><span class="line">关闭目标程序 supervisorctl stop spider</span><br><span class="line">启动目标程序 supervisorctl start spider</span><br><span class="line">关闭所有程序 supervisorctl shutdown</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Centos7-SS-Panel&quot;&gt;&lt;a href=&quot;#Centos7-SS-Panel&quot; class=&quot;headerlink&quot; title=&quot;Centos7 SS-Panel&quot;&gt;&lt;/a&gt;Centos7 SS-Panel&lt;/h1&gt;&lt;h4 id=&quot;ss-panel与
      
    
    </summary>
    
    
      <category term="CentOS" scheme="http://iiooio.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 Shadowscoks搭建</title>
    <link href="http://iiooio.com/blog/CentOS7_Shadowscoks%E6%90%AD%E5%BB%BA/"/>
    <id>http://iiooio.com/blog/CentOS7_Shadowscoks搭建/</id>
    <published>2015-11-30T02:20:37.000Z</published>
    <updated>2018-04-18T13:11:26.245Z</updated>
    
    <content type="html"><![CDATA[<h2 id="shadowsocks-简介"><a href="#shadowsocks-简介" class="headerlink" title="shadowsocks 简介"></a>shadowsocks 简介</h2><p>shadowsocks 是一款自定义协议的代理软件，由于其流量特征不明显，（直到不久前）一直可以稳定提供上网代理。</p><p>shadowsocks 客户端会在本地开启一个 socks5 代理，通过此代理的网络访问请求由客户端发送至服务端，服务端发出请求，收到响应数据后再发回客户端。</p><p>因此使用 shadowsocks 需要一台墙外的服务器来部署 shadowsocks 服务端。</p><h2 id="购买-VPS-服务器"><a href="#购买-VPS-服务器" class="headerlink" title="购买 VPS 服务器"></a>购买 VPS 服务器</h2><p>主流的 VPS（虚拟主机）服务器提供商有三家：</p><p>linode</p><p>digital ocean</p><p>bandwagon</p><p>下面的比上面的便宜。如果只是自用，bandwagon 足够。<br>一般使用 paypal 绑定一个 visa 或 mastercard 信用卡来付款。注意要用国际 paypal 帐号，国内的是不能用外币付款的。</p><h2 id="安装-shadowsocks"><a href="#安装-shadowsocks" class="headerlink" title="安装 shadowsocks"></a>安装 shadowsocks</h2><p>在 bandwagon 购买 VPS 以后会获得一个主机地址和用于 ssh 登录的 root 密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install python-setuptools pip</span><br></pre></td></tr></table></figure><h2 id="配置-Shadowsocks"><a href="#配置-Shadowsocks" class="headerlink" title="配置 Shadowsocks"></a>配置 Shadowsocks</h2><p>打开 shell，使用 VPS 服务商提供的 root 用户和密码 SSH 登录 VPS。然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Debian/Ubuntu:</span><br><span class="line">apt-get install python-pip</span><br><span class="line">pip install shadowsocks</span><br><span class="line"></span><br><span class="line">CentOS:</span><br><span class="line">yum install python-setuptools &amp;amp;&amp;amp; easy_install pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure><p>shadowsocks 就安装好了。</p><p>有时 Ubuntu 会遇到第一个命令安装 python-pip 时找不到包的情况。pip 官方给出了一个安装脚本，可以自动安装 pip。先下载脚本，然后执行即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">python get-pip.py</span><br></pre></td></tr></table></figure><p>编写配置文件</p><p>shadowsocks 启动时的参数，如服务器端口，代理端口，登录密码等，可以通过启动时的命令行参数来设定，也可以通过 json 格式的配置文件设定。推荐使用配置文件，方便查看和修改。</p><p>用 vi 新建一个配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/shadowsocks.json</span><br></pre></td></tr></table></figure><p>然后输入如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">   &quot;server&quot;:&quot;my_server_ip&quot;, </span><br><span class="line">   &quot;server_port&quot;:8000, </span><br><span class="line">   &quot;local_address&quot;: &quot;127.0.0.1&quot;, </span><br><span class="line">   &quot;local_port&quot;:1080, </span><br><span class="line">   &quot;password&quot;:&quot;mypassword&quot;,</span><br><span class="line">   &quot;timeout&quot;:300, </span><br><span class="line">   &quot;method&quot;:&quot;aes-256-cfb&quot;, </span><br><span class="line">   &quot;fast_open&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存退出。</p><p>上方代码的解释：<br>字段名   含义<br>server  服务端监听的地址，服务端可填写0.0.0.0<br>server_port 服务端的端口<br>local_address   本地端监听的地址<br>local_port  本地端的端口<br>password    用于加密的密码<br>timeout 超时时间，单位秒<br>method  默认 “aes-256-cfb”，参见加密方法<br>fast_open   是否使用 TCP_FASTOPEN, true / false<br>workers worker 数量，Unix/Linux 可用，如果不理解含义请不要改</p><h4 id="如要你需要分享SS服务给朋友或家人，可以配置多个SS账户，具体可以参考下面的代码。"><a href="#如要你需要分享SS服务给朋友或家人，可以配置多个SS账户，具体可以参考下面的代码。" class="headerlink" title="如要你需要分享SS服务给朋友或家人，可以配置多个SS账户，具体可以参考下面的代码。"></a>如要你需要分享SS服务给朋友或家人，可以配置多个SS账户，具体可以参考下面的代码。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;server&quot;:&quot;your_server_ip&quot;,</span><br><span class="line">&quot;port_password&quot;:&#123;</span><br><span class="line">     &quot;8381&quot;:&quot;pass1&quot;,</span><br><span class="line">     &quot;8382&quot;:&quot;pass2&quot;,</span><br><span class="line">     &quot;8383&quot;:&quot;pass3&quot;,</span><br><span class="line">     &quot;8384&quot;:&quot;pass4&quot;</span><br><span class="line">     &#125;,</span><br><span class="line">&quot;timeout&quot;:60,</span><br><span class="line">&quot;method&quot;:&quot;rc4-md5&quot;,</span><br><span class="line">&quot;fast_open&quot;:false,</span><br><span class="line">&quot;workers&quot;:1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="启动-shadowsocks"><a href="#启动-shadowsocks" class="headerlink" title="启动 shadowsocks"></a>启动 shadowsocks</h4><p>如果已经写好了配置文件，启动 shadowsocks 服务器的命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json</span><br></pre></td></tr></table></figure><p>后台启动和停止 shadowsocks 服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br><span class="line">ssserver -c /etc/shadowsocks.json -d stop</span><br></pre></td></tr></table></figure><p>shadowsocks 的日志保存在<code>/var/log/shadowsocks.log</code><br>安装并启动 shadowsocks 客户端</p><p>shadowsocks 支持 windows、Mac OS X、Linux、Android、iOS 等多个平台。iOS平台上使用Suger 软件进行代理。</p><p>shadowsocks 项目 Github 主页在这里。</p><p>里面可以找到客户端下载地址。</p><p>下载安装客户端以后，只需按服务器的配置填写 IP 地址、服务器端口、本地端口（如果没有本地端口选项，就是默认的 1080）、密码、加密方式等参数，启动就可以了。</p><p>客户端支持全局代理和 PAC 代理两种方式，后者会使用一个脚本来自动检查一个网站是否在需要代理的网站列表中，自动选择直接连接或代理连接。</p><p>PAC 列表可以在线更新，但是难免有收录不全的情况。这时可以选择关闭 shadowsocks 代理（实际上是取消对系统代理的配置，shadowsocks 客户端仍然保持工作），然后使用支持自定义规则的代理管理插件来实现自动切换代理，比如 switchyOmega。</p><h2 id="使用-switchyOmega-实现自动切换代理"><a href="#使用-switchyOmega-实现自动切换代理" class="headerlink" title="使用 switchyOmega 实现自动切换代理"></a>使用 switchyOmega 实现自动切换代理</h2><p>switchyOmega 是 chrome 浏览器上一个很好用的代理管理插件。它的前身 switchySharp 更有名。</p><p>chrome 应用商店本身需要翻墙才能访问，因此需要先在 shadowsocks 启动代理模式下下载安装，再关闭 shadowsocks 代理。</p><p>安装完毕后，右击 switchyOmega 图标，选择选项，进入 switchOmega 配置界面。</p><p>创建 shadowsocks 情景模式</p><p>新建一个情景模式，比如叫 SS，代理协议选择 socks5，代理地址为 127.0.0.1，端口 1080。</p><p>现在切换到 SS 情景模式就可以通过 shadowsocks 科学上网了。后面获取自动切换规则列表</p><p>设置自动切换模式</p><p>在设置界面选择自动切换模式，在 “切换规则” 中勾选“规则列表规则”，对应的情景模式选择刚刚新建的 SS。</p><p>然后在下面的规则列表地址中填写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt</span><br></pre></td></tr></table></figure><p>规则列表格式选择 AutoProxy。</p><p>然后点击立即更新情景模式， 更新完成后会有提示。</p><p>点击左侧的 “应用选项”。然后单击 switchyOmega 图标，选择自动切换，就可以在访问“不存在的网站” 时自动切换到 shadowsocks 代理了。</p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>Shadowsocks GUI</p><p>服务端启动完成后需要配置本地端，<br>在此网页根据自己的系统下载最新的Shadowsocks GUI </p><p><a href="http://sourceforge.net/projects/shadowsocksgui/files/dist/" target="_blank" rel="noopener">http://sourceforge.net/projects/shadowsocksgui/files/dist/</a><br>相关说明参见此项目的GitHub </p><p><a href="https://github.com/shadowsocks/shadowsocks-gui" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-gui</a></p><p>win版以.xz结尾，可能需要新版Winrar才能解压。</p><h4 id="SwitchyOmega"><a href="#SwitchyOmega" class="headerlink" title="SwitchyOmega"></a>SwitchyOmega</h4><p>在Chrome浏览器中下载插件SwitchyOmega（新版的SwitchySharp，个人感觉自动规则切换更加迅速）并如图配置即可使用代理访问shadowsocks，其他浏览器类似 。</p><p>设置完成后点击Chrome右上角SwitchyOmega标志，当为如图所示时即为使用代理上网 </p><h4 id="添加自定义规则"><a href="#添加自定义规则" class="headerlink" title="添加自定义规则"></a>添加自定义规则</h4><p>如果遇到某个国外网站无法直接连接或速度太慢时，可以单击 switchyOmega 图标，选择 “添加条件”，情景模式选择 SS，就可以了。</p><p>这时打开 switchyOmega 选项，在自动切换模式的切换规则中就可以看到刚刚添加的规则。可以在这里管理自定义的规则。</p><p>导入和导出 switchyOmega 设置</p><p>如果换了一台电脑，重新设置一遍 switchyOmega 就太麻烦了。可以在设置好的 switchyOmega 中导出设置文件，在另一个 chrome 浏览器中导入，就可以直接复制原来的设置了。</p><p>在 switchyOmega 选项的左侧点击 “导入 / 导出”，点击“生成备份文件” 即可生成 switchyOmega 设置备份。点击 “从备份文件恢复” 可以导入备份文件。</p><h4 id="shadowsocks服务器TCP优化"><a href="#shadowsocks服务器TCP优化" class="headerlink" title="shadowsocks服务器TCP优化"></a>shadowsocks服务器TCP优化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/sysctl.conf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">fs.file-max = 51200</span><br><span class="line">#提高整个系统的文件限制</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">#表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭；</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">#表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭；</span><br><span class="line">net.ipv4.tcp_tw_recycle = 0</span><br><span class="line">#表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭；</span><br><span class="line">#为了对NAT设备更友好，建议设置为0。</span><br><span class="line">net.ipv4.tcp_fin_timeout = 30</span><br><span class="line">#修改系統默认的 TIMEOUT 时间。</span><br><span class="line">net.ipv4.tcp_keepalive_time = 1200</span><br><span class="line">#表示当keepalive起用的时候，TCP发送keepalive消息的频度。缺省是2小时，改为20分钟。</span><br><span class="line">net.ipv4.ip_local_port_range = 10000 65000 #表示用于向外连接的端口范围。缺省情况下很小：32768到61000，改为10000到65000。（注意：这里不要将最低值设的太低，否则可能会占用掉正常的端口！）</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 8192</span><br><span class="line">#表示SYN队列的长度，默认为1024，加大队列长度为8192，可以容纳更多等待连接的网络连接数。</span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 5000</span><br><span class="line">#表示系统同时保持TIME_WAIT的最大数量，如果超过这个数字，TIME_WAIT将立刻被清除并打印警告信息。</span><br><span class="line">#额外的，对于内核版本新于**3.7.1**的，我们可以开启tcp_fastopen：</span><br><span class="line">net.ipv4.tcp_fastopen = 3</span><br><span class="line"></span><br><span class="line"># increase TCP max buffer size settable using setsockopt()</span><br><span class="line">net.core.rmem_max = 67108864 </span><br><span class="line">net.core.wmem_max = 67108864 </span><br><span class="line"># increase Linux autotuning TCP buffer limit</span><br><span class="line">net.ipv4.tcp_rmem = 4096 87380 67108864</span><br><span class="line">net.ipv4.tcp_wmem = 4096 65536 67108864</span><br><span class="line"># increase the length of the processor input queue</span><br><span class="line">net.core.netdev_max_backlog = 250000</span><br><span class="line"># recommended for hosts with jumbo frames enabled</span><br><span class="line">net.ipv4.tcp_mtu_probing=1</span><br></pre></td></tr></table></figure><p>保存并退出该文件,然后使用以下指令使配置生效： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;shadowsocks-简介&quot;&gt;&lt;a href=&quot;#shadowsocks-简介&quot; class=&quot;headerlink&quot; title=&quot;shadowsocks 简介&quot;&gt;&lt;/a&gt;shadowsocks 简介&lt;/h2&gt;&lt;p&gt;shadowsocks 是一款自定义协议的代
      
    
    </summary>
    
    
      <category term="CentOS" scheme="http://iiooio.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 搭建IPSec-L2TP</title>
    <link href="http://iiooio.com/blog/CentOS7_%E6%90%AD%E5%BB%BAIPSec-L2TP/"/>
    <id>http://iiooio.com/blog/CentOS7_搭建IPSec-L2TP/</id>
    <published>2015-11-03T02:20:07.000Z</published>
    <updated>2018-04-18T13:13:04.344Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-安装ipsec"><a href="#1-安装ipsec" class="headerlink" title="1.安装ipsec"></a>1.安装ipsec</h5><p>openswan 是linux 下vpn协议ipsec的一种实现，centos 7 带的是它的开源社区分支，现在叫libreswan, 我们通过yum来安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install libreswan or yum install openswan</span><br></pre></td></tr></table></figure><p>修改配置文件</p><p>1、编辑 /etc/ipsec.conf 文件末尾找到 include /etc/ipsec.d/*.conf 这行解注</p><p>2、在 /etc/ipsec.d/ 目录中新建一个配置文件 l2tp_vpn.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ipsec.d/l2tp_vpn.conf</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">conn L2TP-PSK-NAT</span><br><span class="line">    rightsubnet=vhost:%priv</span><br><span class="line">    also=L2TP-PSK-noNAT</span><br><span class="line">conn L2TP-PSK-noNAT</span><br><span class="line">    authby=secret</span><br><span class="line">    pfs=no</span><br><span class="line">    auto=add</span><br><span class="line">    type=transport</span><br><span class="line">    keyingtries=3</span><br><span class="line">    rekey=no</span><br><span class="line">    ikelifetime=4h</span><br><span class="line">    salifetime=4h</span><br><span class="line">    left=YOU.SERVER.PUBLIC.IP</span><br><span class="line">    leftprotoport=17/1701</span><br><span class="line">    right=%any</span><br><span class="line">    rightprotoport=17/%any</span><br></pre></td></tr></table></figure><p>注意将YOU.SERVER.PUBLIC.IP替换成你的VPS公网地址</p><p>配置项的说明可以参考： <a href="https://libreswan.org/man/ipsec.conf.5.html" target="_blank" rel="noopener">https://libreswan.org/man/ipsec.conf.5.html</a></p><p>设置共享密钥</p><p>cat /etc/ipsec.secrets文件内容如下：</p><p>include /etc/ipsec.d/*.secrets</p><p>然后在 /etc/ipsec.d/ 目录中新建一个配置文件 l2tp_vpn.secrets</p><p>内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YOU.SERVER.PUBLIC.IP %any: PSK &quot;woaini&quot;</span><br></pre></td></tr></table></figure><p>注意将YOU.SERVER.PUBLIC.IP替换成你的公网地址</p><p>woaini 即是共享密钥,可以替换成你自己的。</p><p>修改包转发设置</p><p>编辑/etc/sysctl.conf ， 修改以下选项的值（若没有就添加）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line"></span><br><span class="line">net.ipv4.conf.all.rp_filter = 0</span><br><span class="line">net.ipv4.conf.default.rp_filter = 0</span><br><span class="line">net.ipv4.conf.eth0.rp_filter = 0</span><br><span class="line"></span><br><span class="line">net.ipv4.conf.all.send_redirects = 0</span><br><span class="line">net.ipv4.conf.default.send_redirects = 0</span><br><span class="line"></span><br><span class="line">net.ipv4.conf.all.accept_redirects = 0</span><br><span class="line">net.ipv4.conf.default.accept_redirects = 0</span><br></pre></td></tr></table></figure><p>然后执行 sysctl -p</p><p>启动 ipsec</p><p>终端执行 systemctl start ipsec 来启动ipsec.<br>终端执行 systemctl enable ipsec 将ipsec 加入开机启动。</p><p>然后执行 systemctl status ipsec 可以看到状态为 Active: active (running)</p><p>执行 ipsec verify, 输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Verifying installed system and configuration files</span><br><span class="line"></span><br><span class="line">Version check and ipsec on-path                    [OK]</span><br><span class="line">Libreswan 3.8 (netkey) on 3.15.4-x86_64-linode45</span><br><span class="line">Checking for IPsec support in kernel                [OK]</span><br><span class="line">NETKEY: Testing XFRM related proc values</span><br><span class="line">        ICMP default/send_redirects                [OK]</span><br><span class="line">        ICMP default/accept_redirects              [OK]</span><br><span class="line">        XFRM larval drop                          [OK]</span><br><span class="line">Pluto ipsec.conf syntax                            [OK]</span><br><span class="line">Hardware random device                              [N/A]</span><br><span class="line">Two or more interfaces found, checking IP forwarding    [OK]</span><br><span class="line">Checking rp_filter                                  [OK]</span><br><span class="line">Checking that pluto is running                      [OK]</span><br><span class="line">Pluto listening for IKE on udp 500                [OK]</span><br><span class="line">Pluto listening for IKE/NAT-T on udp 4500          [OK]</span><br><span class="line">Pluto ipsec.secret syntax                          [OK]</span><br><span class="line">Checking NAT and MASQUERADEing                      [TEST INCOMPLETE]</span><br><span class="line">Checking &apos;ip&apos; command                              [OK]</span><br><span class="line">Checking &apos;iptables&apos; command                        [OK]</span><br><span class="line">Checking &apos;prelink&apos; command does noted interfere with FIPSChecking for obsolete ipsec.conf options            [OK]</span><br><span class="line">Opportunistic Encryption                            [DISABLED]</span><br></pre></td></tr></table></figure><p>NAT and MASQUERADEing [TEST INCOMPLETE] 不用担心，这不是说checking没完，是ipsec这个检查NAT的功能还没开发完， man ipsec verify 可以看到说明</p><p>修改防火墙设置</p><p>centos 7 防火墙服务用的是 firewalld。防火墙的配置方法感觉比以前更容易理解很多。</p><p>让防火墙允许ipsec通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-service=ipsec --permanent</span><br></pre></td></tr></table></figure><p>如果报</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FirewallD is not running</span><br></pre></td></tr></table></figure><p>是你的防火墙还没开。 可以执行 systemctl start firewalld 开启防火墙。</p><p>执行 systemctl status firewalld 查看状态</p><p>执行 systemctl enable firewalld 让其开机自启 。</p><p>之前没开启防火墙的此时记得执行 firewall-cmd –add-service=ipsec –permanent 这个哦。</p><p>因为默认的ipsec service 只开放了500端口，如果要穿nat 需要再开放 4500端口。</p><p>扫行 cp /lib/firewalld/services/ipsec.xml /etc/firewalld/services/ipsec.xml</p><p>拷贝默认的ipsec配置到自定义目录下。</p><p>然后编辑它， vi /etc/firewalld/services/ipsec.xml 加入如下行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;port protocol=&quot;udp&quot; port=&quot;4500&quot;&gt;</span><br></pre></td></tr></table></figure><p>执行 firewall-cmd –reload 生效</p><p>可以再执行 iptables -n -L 确认一下是不是500和4500端口开启了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Chain IN_public_allow (1 references)</span><br><span class="line">target    prot opt source              destination</span><br><span class="line">ACCEPT    ah  --  0.0.0.0/0            0.0.0.0/0            ctstate NEW</span><br><span class="line">ACCEPT    esp  --  0.0.0.0/0            0.0.0.0/0            ctstate NEW</span><br><span class="line">ACCEPT    udp  --  0.0.0.0/0            0.0.0.0/0            udp dpt:500 ctstate NEW</span><br><span class="line">ACCEPT    udp  --  0.0.0.0/0            0.0.0.0/0            udp dpt:4500 ctstate NEW</span><br></pre></td></tr></table></figure><p>测试ipsec配置</p><p>在客户端新建 ipsec+l2tp 的连接，填好服务器地址和共享密码，点击连接。</p><p>在服务器端执行 tail -100f /var/log/secure 看日志，如果出现了类似</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STATE_QUICK_R2: IPsec SA established transport mode</span><br></pre></td></tr></table></figure><p>这样的日志就说明 ipsec 没问题了。</p><p>在客户端 如果你用MAC OSX，也可以看 tail /var/log/system.log |grep ppp，有类似</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pppd[2056]: IPSec connection established</span><br></pre></td></tr></table></figure><p>说明客户端也是成功了。</p><p>至此ipsec 配置完成。</p><h4 id="2-安装l2tp"><a href="#2-安装l2tp" class="headerlink" title="2.安装l2tp"></a>2.安装l2tp</h4><p>xl2tpd是l2tp的实现，centos 6 是可以通过添加 epel再yum安装的。但是笔者写此文的时候centos 7的epel源中貌似还没有这个包，所以只能比较土地编译安装了。<br>也许你可以尝试 yum install xl2tpd 试试看现在是不是已经有打包了。</p><p>或者打开 <a href="http://dl.fedoraproject.org/pub/epel/" target="_blank" rel="noopener">http://dl.fedoraproject.org/pub/epel/</a> 找找看centos 7中现在是不是加上了</p><p>编译安装 xl2tpd</p><p>安装gcc和依赖</p><p>yum install gcc libpcap-devel</p><p>从这里找到最新的release包 <a href="https://github.com/xelerance/xl2tpd/releases" target="_blank" rel="noopener">https://github.com/xelerance/xl2tpd/releases</a></p><p>下载解压源码<br>cd ~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/xelerance/xl2tpd/archive/v1.3.6.tar.gz</span><br><span class="line">tar -xvzf v1.3.6.tar.gz</span><br></pre></td></tr></table></figure><p>编译安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line"></span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>配置xl2tpd</p><p>编辑 /etc/xl2tpd/xl2tpd.conf (没有的话就创建一个)，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">listen-addr = YOU.SERVER.PUBLIC.IP</span><br><span class="line">auth file = /etc/ppp/chap-secrets</span><br><span class="line">port = 1701</span><br><span class="line"></span><br><span class="line">[lns default]</span><br><span class="line">ip range = 10.5.1.10-10.5.1.100</span><br><span class="line">local ip = 10.5.1.2</span><br><span class="line">; leave chap unspecified for maximum compatibility with windows, iOS, etc</span><br><span class="line">; require chap = yes</span><br><span class="line">refuse pap = yes</span><br><span class="line">require authentication = yes</span><br><span class="line">name = L2TPVPN</span><br><span class="line">ppp debug = yes</span><br><span class="line">pppoptfile = /etc/ppp/options.xl2tpd</span><br><span class="line">length bit = yes</span><br></pre></td></tr></table></figure><p>注意将YOU.SERVER.PUBLIC.IP替换成你的公网地址</p><p>编辑 /etc/ppp/options.xl2tpd (没有的话就创建一个)，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">ipcp-accept-local</span><br><span class="line">ipcp-accept-remote</span><br><span class="line"></span><br><span class="line"># 使用google的 8.8.8.8</span><br><span class="line"></span><br><span class="line">ms-dns  8.8.8.8</span><br><span class="line">ms-dns  8.8.4.4</span><br><span class="line">noccp</span><br><span class="line">auth</span><br><span class="line">crtscts</span><br><span class="line">idle 1800</span><br><span class="line"></span><br><span class="line"># 将mtu改小，对ios等设备连接貌似有用。</span><br><span class="line"></span><br><span class="line">mtu 1356</span><br><span class="line">mru 1356</span><br><span class="line">nodefaultroute</span><br><span class="line">debug</span><br><span class="line">lock</span><br><span class="line">proxyarp</span><br><span class="line">connect-delay 5000</span><br><span class="line">`</span><br><span class="line">最后编辑 /etc/ppp/chap-secrets (没有的话就创建),格式如下：</span><br><span class="line">`</span><br><span class="line"></span><br><span class="line"># Secrets for authentication using CHAP</span><br><span class="line"></span><br><span class="line"># client    server  secret          IP addresses</span><br><span class="line"></span><br><span class="line">username  *  vvusu          *</span><br></pre></td></tr></table></figure><p>这样添加的客户帐号就是username ,密码是woaini.</p><p>修改防火墙</p><p>执行 firewall-cmd –new-service=xl2tpd –permanent</p><p>如果是yum 安装的可以找找看是不是 /lib/firewalld/services 下有xl2tpd的文件，有的话拷贝到 /etc/firewalld/services</p><p>这样会在 /etc/firewalld/services/ 生成一个 xl2tpd.xml 文件。编辑<br><code>&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&amp;lt;service&amp;gt;    &amp;lt;short&amp;gt;xl2tpd&amp;lt;/short&amp;gt;    &amp;lt;port protocol=&quot;udp&quot; port=&quot;1701&quot;/&amp;gt;&amp;lt;/service&amp;gt;</code><br>执行firewall-cmd –add-service=xl2tpd –permanent，添加。</p><p>可以执行iptables -n -L 看一下 1701 udp端口是不是打开了。</p><p>如果还没有生效的话 执行firewall-cmd –reload重新载入一下。</p><p>连接测试</p><p>执行xl2tpd -D<br>输入类似如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xl2tpd[11944]: L2TP kernel support not detected (try modprobing l2tp_ppp and pppol2tp)</span><br><span class="line">xl2tpd[11944]: open_controlfd: Unable to open /var/run/xl2tpd/l2tp-control for reading.</span><br></pre></td></tr></table></figure><p>kernel support的不理它。</p><p>后面那行需要创建一下目录 mkdir /var/run/xl2tpd</p><p>然后客户端发起连接测试一下。</p><p>记得帐号密码在 /etc/ppp/chap-secrets, 共享密钥在/etc/ipsec.d/l2tp_vpn.secrets哦</p><p>xl2tpd 输出类似如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Call established with xx.xx.xx.xx , Local: 28828, Remote: 10057, Serial: 1</span><br></pre></td></tr></table></figure><p>表示连接成功了。</p><p>现在就只差最后一步了，有点开心。</p><p>将防火墙开启 MASQUERADE 就可以通过vpn翻墙了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-masquerade --permanent</span><br></pre></td></tr></table></figure><p>重新加载一下， firewall-cmd –reload</p><p>OK 至此，所有的配置完成。</p><p>在你的浏览器里 打开 <a href="http://facebook.com" target="_blank" rel="noopener">http://facebook.com</a> 试试看吧。</p><p>it works!</p><p>最后将xl2tpd 加到开机启动</p><p>编辑 /usr/lib/systemd/system/xl2tpd.service 文件 ，内容如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=xl2tpd server daemon</span><br><span class="line">After=syslog.target network.target ipsec.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">PIDFile=/var/run/xl2tpd/xl2tpd.pid</span><br><span class="line">ExecStart=/usr/local/sbin/xl2tpd -p /var/run/xl2tpd/xl2tpd.pid</span><br><span class="line">Restart=on-abort</span><br><span class="line">KillMode=process</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>然后执行systemctl daemon-reload</p><p>再执行 systemctl restart xl2tpd, systemctl enable xl2tpd</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;1-安装ipsec&quot;&gt;&lt;a href=&quot;#1-安装ipsec&quot; class=&quot;headerlink&quot; title=&quot;1.安装ipsec&quot;&gt;&lt;/a&gt;1.安装ipsec&lt;/h5&gt;&lt;p&gt;openswan 是linux 下vpn协议ipsec的一种实现，centos 7 
      
    
    </summary>
    
    
      <category term="CentOS" scheme="http://iiooio.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 Firewalld</title>
    <link href="http://iiooio.com/blog/CentOS7_Firewalld/"/>
    <id>http://iiooio.com/blog/CentOS7_Firewalld/</id>
    <published>2015-10-31T09:22:37.000Z</published>
    <updated>2018-04-18T13:00:23.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CentOS7-Firewalld"><a href="#CentOS7-Firewalld" class="headerlink" title="CentOS7 Firewalld"></a>CentOS7 Firewalld</h1><p>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install firewalld`</span><br></pre></td></tr></table></figure><p>图形界面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install firewall-config`</span><br></pre></td></tr></table></figure><p>介绍<br>防火墙守护 firewalld 服务引入了一个信任级别的概念来管理与之相关联的连接与接口。它支持 ipv4 与 ipv6，并支持网桥，采用 firewall-cmd (command) 或 firewall-config (gui) 来动态的管理 kernel netfilter 的临时或永久的接口规则，并实时生效而无需重启服务。 </p><p>zone<br> Firewall 能将不同的网络连接归类到不同的信任级别，Zone 提供了以下几个级别</p><ul><li>drop: 丢弃所有进入的包，而不给出任何响应</li><li>block: 拒绝所有外部发起的连接，允许内部发起的连接</li><li>public: 允许指定的进入连接</li><li>external: 同上，对伪装的进入连接，一般用于路由转发</li><li>dmz: 允许受限制的进入连接</li><li>work: 允许受信任的计算机被限制的进入连接，类似 workgroup</li><li>home: 同上，类似 homegroup</li><li>internal: 同上，范围针对所有互联网用户</li><li>trusted: 信任所有连接</li></ul><p>过滤规则</p><ul><li>source: 根据源地址过滤</li><li>interface: 根据网卡过滤</li><li>service: 根据服务名过滤</li><li>port: 根据端口过滤</li><li>icmp-block: icmp 报文过滤，按照 icmp 类型配置</li><li>masquerade: ip 地址伪装</li><li>forward-port: 端口转发</li><li>rule: 自定义规则</li></ul><p>其中，过滤规则的优先级遵循如下顺序</p><ol><li>source</li><li>interface</li><li>firewalld.conf</li></ol><p>其中，过滤规则的优先级遵循如下顺序</p><ol><li>source</li><li>interface</li><li>firewalld.conf</li></ol><p>二、使用方法</p><pre><code># systemctl unmask firewalld      #解除锁定# systemctl start firewalld       # 启动 # systemctl enable firewalld      # 开机启动 # systemctl stop firewalld        # 关闭 # systemctl disable firewalld     # 取消开机启动 </code></pre><p>具体的规则管理，可以使用 <code>firewall-cmd</code>，具体的使用方法可以</p><pre><code>$ firewall-cmd --help--zone=NAME                         # 指定 zone--permanent                         # 永久修改，--reload 后生效--timeout=seconds                   # 持续效果，到期后自动移除，用于调试，不能与 --permanent 同时使用</code></pre><ol><li>查看规则<br>查看运行状态</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --state</span><br></pre></td></tr></table></figure><p>查看已被激活的 Zone 信息</p><pre><code>$ firewall-cmd --get-active-zonespublic  interfaces: eth0 eth1</code></pre><p>查看指定接口的 Zone 信息</p><pre><code>$ firewall-cmd --get-zone-of-interface=eth0public</code></pre><p>查看指定级别的接口</p><pre><code>$ firewall-cmd --zone=public --list-interfaceseth0</code></pre><p>查看指定级别的所有信息，譬如 public</p><pre><code>$ firewall-cmd --zone=public --list-allpublic (default, active)  interfaces: eth0  sources:  services: dhcpv6-client http ssh  ports:  masquerade: no  forward-ports:  icmp-blocks:  rich rules:</code></pre><p>查看所有级别被允许的信息</p><pre><code>$ firewall-cmd --get-service</code></pre><p>查看重启后所有 Zones 级别中被允许的服务，即永久放行的服务</p><pre><code>$ firewall-cmd --get-service --permanent</code></pre><ol start="2"><li>管理规则</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># firewall-cmd --panic-on           # 丢弃</span><br><span class="line"># firewall-cmd --panic-off          # 取消丢弃</span><br><span class="line"># firewall-cmd --query-panic        # 查看丢弃状态</span><br><span class="line"># firewall-cmd --reload             # 更新规则，不重启服务</span><br><span class="line"># firewall-cmd --complete-reload    # 更新规则，重启服务</span><br><span class="line">#firewall-cmd --reload              # 效果同上</span><br></pre></td></tr></table></figure><p>添加某接口至某信任等级，譬如添加 eth0 至 public，永久修改</p><pre><code># firewall-cmd --zone=public --add-interface=eth0 --permanent</code></pre><p>设置 public 为默认的信任级别</p><pre><code># firewall-cmd --set-default-zone=public</code></pre><p>A. 管理端口<br>列出 dmz 级别的被允许的进入端口</p><pre><code># firewall-cmd --zone=dmz --list-ports</code></pre><p>允许 tcp 端口 8080 至 dmz 级别</p><pre><code># firewall-cmd --zone=dmz --add-port=8080/tcp</code></pre><p>允许某范围的 udp 端口至 public 级别，并永久生效</p><pre><code># firewall-cmd --zone=public --add-port=10000-20000/tcp --permanent</code></pre><p>B. 网卡接口<br>列出 public zone 所有网卡</p><pre><code># firewall-cmd --zone=public --list-interfaces</code></pre><p>将 eth0 添加至 public zone，永久</p><pre><code># firewall-cmd --zone=public --permanent --add-interface=eth0</code></pre><p>eth0 存在与 public zone，将该网卡添加至 work zone，并将之从 public zone 中删除</p><pre><code># firewall-cmd --zone=work --permanent --change-interface=eth0</code></pre><p>删除 public zone 中的 eth0，永久</p><pre><code># firewall-cmd --zone=public --permanent --remove-interface=eth0</code></pre><p>C. 管理服务<br>添加 smtp 服务至 work zone</p><pre><code># firewall-cmd --zone=work --add-service=smtp</code></pre><p>移除 work zone 中的 smtp 服务</p><pre><code># firewall-cmd --zone=work --remove-service=smtp</code></pre><p>D. 配置 external zone 中的 ip 地址伪装<br>查看</p><pre><code># firewall-cmd --zone=external --query-masquerade</code></pre><p>打开伪装</p><pre><code># firewall-cmd --zone=external --add-masquerade</code></pre><p>关闭伪装</p><pre><code># firewall-cmd --zone=external --remove-masquerade</code></pre><p>E. 配置 public zone 的端口转发<br>要打开端口转发，则需要先</p><pre><code># firewall-cmd --zone=public --add-masquerade</code></pre><p>然后转发 tcp 22 端口至 3753</p><pre><code># firewall-cmd --zone=public --add-forward-port=port=22:proto=tcp:toport=3753</code></pre><p>转发 22 端口数据至另一个 ip 的相同端口上</p><pre><code># firewall-cmd --zone=public --add-forward-port=port=22:proto=tcp:toaddr=192.168.1.100</code></pre><p>转发 22 端口数据至另一 ip 的 2055 端口上</p><pre><code># firewall-cmd --zone=public --add-forward-port=port=22:proto=tcp:toport=2055:toaddr=192.168.1.100</code></pre><p>F. 配置 public zone 的 icmp<br>查看所有支持的 icmp 类型</p><pre><code># firewall-cmd --get-icmptypesdestination-unreachable echo-reply echo-request parameter-problem redirect router-advertisement router-solicitation source-quench time-exceeded</code></pre><p>列出</p><pre><code># firewall-cmd --zone=public --list-icmp-blocks</code></pre><p>添加 echo-request 屏蔽</p><pre><code># firewall-cmd --zone=public --add-icmp-block=echo-request [--timeout=seconds]</code></pre><p>移除 echo-reply 屏蔽</p><pre><code># firewall-cmd --zone=public --remove-icmp-block=echo-reply</code></pre><p>G. IP 封禁</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#仅允许部分IP访问本机服务配置</span><br><span class="line">#firewall-cmd --permanent --zone=public --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.0.4/24&quot; service name=&quot;http&quot; accept&quot;</span><br><span class="line">        </span><br><span class="line">#不允许部分IP访问本机服务配置     </span><br><span class="line"># firewall-cmd --permanent --add-rich-rule=&quot;rule family=&apos;ipv4&apos; source address=&apos;222.222.222.222&apos; reject&quot;</span><br><span class="line"></span><br><span class="line">#仅允许部分IP访问本机端口配置</span><br><span class="line">firewall-cmd --permanent --zone=public --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.0.4/24&quot; port protocol=&quot;tcp&quot; port=&quot;8080&quot; accept&quot;</span><br><span class="line">```  </span><br><span class="line">H. 其他操作</span><br><span class="line"></span><br><span class="line">检查ftp服务的21端口是否开放</span><br></pre></td></tr></table></figure><p>iptables -L -n | grep 21<br>ACCEPT     tcp  –  0.0.0.0/0            0.0.0.0/0            tcp dpt:21 ctstate<br>NEW<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查询ftp服务启用状态</span><br></pre></td></tr></table></figure></p><p>firewall-cmd –query-service ftp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查看当前规则</span><br></pre></td></tr></table></figure></p><p>firewall-cmd –list-all<br><code>`</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CentOS7-Firewalld&quot;&gt;&lt;a href=&quot;#CentOS7-Firewalld&quot; class=&quot;headerlink&quot; title=&quot;CentOS7 Firewalld&quot;&gt;&lt;/a&gt;CentOS7 Firewalld&lt;/h1&gt;&lt;p&gt;安装：&lt;/p&gt;
&lt;f
      
    
    </summary>
    
    
      <category term="CentOS" scheme="http://iiooio.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>Mac_Python环境搭建</title>
    <link href="http://iiooio.com/blog/Mac%20Python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://iiooio.com/blog/Mac Python环境搭建/</id>
    <published>2015-10-27T23:21:34.000Z</published>
    <updated>2018-04-18T12:32:00.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac-Python环境搭建"><a href="#Mac-Python环境搭建" class="headerlink" title="Mac_Python环境搭建"></a>Mac_Python环境搭建</h1><p>安装 Python</p><p>Mac系统自带Python2.7, 这个其实作为工具来说已经完全够用了. 如果想学习最新的Python3.x 或者有系统洁癖不想在系统的Python上装第三方包, 可以使用homebrew单独安装新的Python.</p><p>安装 Pip</p><p>理论上说安装好python就自带pip工具了, 如果真的没有的话, 可以手动安装. 如果你独立安装python, 先使用which python看看当前环境是否正确.</p><p>下载pip安装脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/get-pip.py</span><br></pre></td></tr></table></figure><p>安装pip</p><p>sudo python get-pip.py<br>如果给python3安装pip, 则使用对应的 python3 命令安装即可.</p><p>安装 virtualenv</p><p>virtualenv是Python的虚拟化环境, 类似于虚拟机的作用, 相当于你一台电脑可以有多个单独的Python环境, 这是非常有用的. 因为python的软件包之间的依赖程度很高, 有可能软件A和软件B 赖软件C不同版本, 这样有可能会导致不兼容.</p><p>譬如说: scrapy依赖six 1.5, 但是在el capitan自带了个six 1.4, 由于Mac自带的一些程序依赖于six 1.4. 系统是不允许你去升级six的. 这个时候使用虚拟化环境就能解决我们的问题.</p><p>命令行安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv</span><br></pre></td></tr></table></figure><p>创建虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv --distribute venv</span><br></pre></td></tr></table></figure><p>激活虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source venv/bin/activate</span><br></pre></td></tr></table></figure><p>这时候命令行的的python就指向venv目录了, 退出虚拟环境 关闭终端即可.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mac-Python环境搭建&quot;&gt;&lt;a href=&quot;#Mac-Python环境搭建&quot; class=&quot;headerlink&quot; title=&quot;Mac_Python环境搭建&quot;&gt;&lt;/a&gt;Mac_Python环境搭建&lt;/h1&gt;&lt;p&gt;安装 Python&lt;/p&gt;
&lt;p&gt;Mac系统
      
    
    </summary>
    
    
      <category term="Mac" scheme="http://iiooio.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Mac_启动Mysql错误</title>
    <link href="http://iiooio.com/blog/Mac%20%E5%90%AF%E5%8A%A8Mysql%E9%94%99%E8%AF%AF/"/>
    <id>http://iiooio.com/blog/Mac 启动Mysql错误/</id>
    <published>2015-09-28T00:21:34.000Z</published>
    <updated>2018-04-18T12:32:00.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac-启动Mysql错误"><a href="#Mac-启动Mysql错误" class="headerlink" title="Mac_启动Mysql错误"></a>Mac_启动Mysql错误</h1><p>①　Check if mysql is properly installed and also set up.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew info mysql</span><br></pre></td></tr></table></figure><p>If it’s not installed then google for how to install ‘mysql through homebrew’. If it is installed do not forget to set up your mysql by doing what homebrew tells you:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">We&apos;ve installed your MySQL database without a root password. To secure it run:</span><br><span class="line">    mysql_secure_installation</span><br><span class="line"></span><br><span class="line">To connect run:</span><br><span class="line">    mysql -uroot</span><br><span class="line"></span><br><span class="line">To have launchd start mysql now and restart at login:</span><br><span class="line">  brew services start mysql</span><br><span class="line">Or, if you don&apos;t want/need a background service you can just run:</span><br><span class="line">  mysql.server start</span><br></pre></td></tr></table></figure><p>In your terminal do everything above. If you got errors, first check if your mysql server is running:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql.server start</span><br></pre></td></tr></table></figure></p><p>Then try mysql_secure_installation and/or mysql -uroot to try and get in.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 2002 (HY000): Can&apos;t connect to local MySQL server through socket &apos;/tmp/mysql.sock&apos; (2)</span><br></pre></td></tr></table></figure><p>In case of this error try: <code>mysql -uroot -h 127.0.0.1</code> I don’t know why but it selects the wrong host by default.</p><p>If this still doesn’t work maybe you already set a password, in that case you need to add -p to the command: <code>mysql -uroot -h 127.0.0.1 -p</code></p><p>If even this fails maybe it’s a permission problem. Try:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R _mysql:mysql /usr/local/var/mysql</span><br><span class="line">sudo mysql.server start</span><br></pre></td></tr></table></figure><p>If you got in properly: That’s great! Let’s create our first Database.</p><p>②　Creating the database you’ll work with.</p><p>So if you didn’t use Laravel Homestead you’ll have to create your database first. Once you got into your mysql through the commands above it should say: mysql&gt; in the terminal now.</p><p>Then just write: <code>CREATE DATABASE my_db</code>; where you can write any name instead of my_db. That’s it!</p><p>③　Setting up your Laravel settings.</p><p>In your Laravel project folder there will be a .env file. Open that and look inside, and search for the following part:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DB_CONNECTION=mysql</span><br><span class="line">DB_HOST=127.0.0.1</span><br><span class="line">DB_PORT=3306</span><br><span class="line">DB_DATABASE=homestead</span><br><span class="line">DB_USERNAME=homestead</span><br><span class="line">DB_PASSWORD=secret</span><br></pre></td></tr></table></figure><p>Even though I didn’t install Laravel through homestead, it has all the ‘homestead’ settings… Here’s what you need to change:</p><ul><li>Check if the DB_HOST is set to <code>127.0.0.1</code></li><li>Set the <code>DB_DATABASE</code> to the one you created. In this case <code>my_db</code></li><li>Set a preferred <code>DB_USERNAME</code> or try root.</li><li>Set the <code>DB_PASSWORD</code> to the password for MySQL you choose at the very beginning, when you set up your mysql through homebrew.</li></ul><p>④　DONE</p><p>You’re done. Try opening the terminal again, go to your Laravel project folder and <code>php artisan migrate</code>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mac-启动Mysql错误&quot;&gt;&lt;a href=&quot;#Mac-启动Mysql错误&quot; class=&quot;headerlink&quot; title=&quot;Mac_启动Mysql错误&quot;&gt;&lt;/a&gt;Mac_启动Mysql错误&lt;/h1&gt;&lt;p&gt;①　Check if mysql is proper
      
    
    </summary>
    
    
      <category term="Mac" scheme="http://iiooio.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>iOS_LLDB调试</title>
    <link href="http://iiooio.com/blog/iOS_LLDB%E8%B0%83%E8%AF%95/"/>
    <id>http://iiooio.com/blog/iOS_LLDB调试/</id>
    <published>2015-07-02T10:21:34.000Z</published>
    <updated>2018-04-18T12:32:00.011Z</updated>
    
    <content type="html"><![CDATA[<p>#iOS_LLDB调试</p><h3 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h3><h4 id="全局断点（Global-BreakPoint）"><a href="#全局断点（Global-BreakPoint）" class="headerlink" title="全局断点（Global BreakPoint）"></a>全局断点（Global BreakPoint）</h4><p>有时候在程序出错的时候不能能准确定位到奔溃的那一行代码,而是直接跑到main循环或者Appdelegate里面， 或者会给你这样的提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC_BAD_ACCESS：</span><br></pre></td></tr></table></figure><p>自定义快捷键</p><h4 id="条件断点-Condational-Breakpoints"><a href="#条件断点-Condational-Breakpoints" class="headerlink" title="条件断点 (Condational Breakpoints)"></a>条件断点 (Condational Breakpoints)</h4><h3 id="NSLog"><a href="#NSLog" class="headerlink" title="NSLog"></a>NSLog</h3><p>这里我教大家强化你的NSLog,可以用下面的这段宏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//A better version of NSLog</span><br><span class="line"></span><br><span class="line"># define NSLog(format, ...) do &#123; \</span><br><span class="line"></span><br><span class="line">fprintf(stderr, \&quot;&amp;lt;%s : %d&gt; %s\n\&quot;, \</span><br><span class="line">[[[NSString stringWithUTF8String:**FILE**] lastPathComponent] UTF8String], \</span><br><span class="line">**LINE**, **func**); \</span><br><span class="line">(NSLog)((format), ##**VA_ARGS**); \</span><br><span class="line">fprintf(stderr, \&quot;-------\n\&quot;); \</span><br><span class="line">&#125; while (0)</span><br></pre></td></tr></table></figure><p>这样打印出来的东西才像话嘛(其实NSLog的打印是非常低效的，甚至比print低100倍.<br>使用objc语言(强类型)并且用NSLog打印的时候，常常搞不清楚NSLog(@“%?”,xxx) xxx这种类型该是什么什么类型输出，应该是%d呢还是%@亦或是%f？？？傻傻分不清楚~，所以玩转NSLog你应该要知道以下这几个全局方法！</p><h3 id="开启僵尸对象-Enable-NSZombie-Objects"><a href="#开启僵尸对象-Enable-NSZombie-Objects" class="headerlink" title="开启僵尸对象(Enable NSZombie Objects)"></a>开启僵尸对象(Enable NSZombie Objects)</h3><p>Xcode可以把那些已经release掉得对象，变成“僵尸”，当我们访问一个Zombie对象时，Xcode可以告诉我们正在访问的对象是一个不应该存在的对象了。因为Xcode知道这个对象是什么，所以可以让我们知道这个对象在哪里，以及这是什么时候发生的。<br><img src="http://okxu47wpt.bkt.clouddn.com/14778920245798.png" alt="14778920245798"></p><p>所以Zombies可以让你输出的信息更具体！！</p><h5 id="僵尸只能用在模拟器和OC语言"><a href="#僵尸只能用在模拟器和OC语言" class="headerlink" title="僵尸只能用在模拟器和OC语言"></a>僵尸只能用在模拟器和OC语言</h5><h3 id="LLDB-调试讲解"><a href="#LLDB-调试讲解" class="headerlink" title="LLDB 调试讲解"></a>LLDB 调试讲解</h3><p>LLDB 是一个有着 REPL 的特性和 C++ ,Python 插件的开源调试器。LLDB 绑定在 Xcode 内部，存在于主窗口底部的控制台中。调试器允许你在程序运行的特定时暂停它，你可以查看变量的值，执行自定的指令，并且按照你所认为合适的步骤来操作程序的进展。</p><p>你可能从未使用过LLDB，那让我们先来热热身。 在调试器中最常用到的命令是p（用于输出基本类型）或者po（用于输出 Objective-C 对象</p><h4 id="help-命令"><a href="#help-命令" class="headerlink" title="help 命令"></a>help 命令</h4><p>最简单命令是 help，它会列举出所有的命令。如果你忘记了一个命令是做什么的，或者想知道更多的话，你可以通过 help <command> 来了解更多细节，例如 help print 或者 help thread。如果你甚至忘记了 help 命令是做什么的，你可以试试 help help。不过你如果知道这么做，那就说明你大概还没有忘光这个命令。</p><h4 id="print-命令"><a href="#print-命令" class="headerlink" title="print 命令"></a>print 命令</h4><p>打印值很简单；只要试试 print 命令:</p><h4 id="expression-命令"><a href="#expression-命令" class="headerlink" title="expression 命令"></a>expression 命令</h4><p>如果想改变一个值怎么办？你或许会猜 modify。其实这时候我们要用到的是 expression 这个方便的命令。<br>这不仅会改变调试器中的值，实际上它改变了程序中的值。</p><h4 id="expr-命令"><a href="#expr-命令" class="headerlink" title="expr 命令"></a>expr 命令</h4><p>可以在调试时动态执行指定表达式，并将结果打印出来。常用于在调试过程中修改变量的值。<br>很明显可以看出，变量a的值被改变。 除此之外，还可以使用这个命令新声明一个变量对象，如：</p><h4 id="bt-命令"><a href="#bt-命令" class="headerlink" title="bt 命令"></a>bt 命令</h4><h4 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">break NUM                            在指定的行上设置断点。</span><br><span class="line">bt                                   显示所有的调用栈帧。该命令可用来显示函数的调用顺序。</span><br><span class="line">clear                                删除设置在特定源文件、特定行上的断点。其用法为：clear FILENAME:NUM。</span><br><span class="line">continue                             继续执行正在调试的程序。该命令用在程序由于处理信号或断点而导致停止运行时。</span><br><span class="line">display EXPR                         每次程序停止后显示表达式的值。表达式由程序定义的变量组成。</span><br><span class="line">file FILE                            装载指定的可执行文件进行调试。</span><br><span class="line">help NAME                            显示指定命令的帮助信息。</span><br><span class="line">info break                           显示当前断点清单，包括到达断点处的次数等。</span><br><span class="line">info files                           显示被调试文件的详细信息。</span><br><span class="line">info func                            显示所有的函数名称。</span><br><span class="line">info local                           显示当函数中的局部变量信息。</span><br><span class="line">info prog                            显示被调试程序的执行状态。</span><br><span class="line">info var                             显示所有的全局和静态变量名称。</span><br><span class="line">kill                                 终止正被调试的程序。</span><br><span class="line">list                                 显示源代码段。</span><br><span class="line">make                                 在不退出 gdb 的情况下运行 make 工具。</span><br><span class="line">next                                 在不单步执行进入其他函数的情况下，向前执行一行源代码。</span><br><span class="line">print EXPR                           显示表达式 EXPR 的值。</span><br><span class="line">print-object                         打印一个对象</span><br><span class="line">print (int) name                    打印一个类型</span><br><span class="line">print-object [artist description]   调用一个函数</span><br><span class="line">set artist = @\&quot;test\&quot;                设置变量值</span><br><span class="line">whatis                              查看变理的数据类型</span><br></pre></td></tr></table></figure><h3 id="Chisel插件调试"><a href="#Chisel插件调试" class="headerlink" title="Chisel插件调试"></a>Chisel插件调试</h3><p>相信每个人或多或少都在用LLDB来调试，比如po一个对象。LLDB的是非常强大的，且有内建的，完整的 Python 支持。今天我们主要介绍一个 facebook 开源的 lldb 插件 Chisel。可以让你的调试更Easy.</p><p>源码地址： <a href="https://github.com/facebook/chisel" target="_blank" rel="noopener">Chisel</a><br>Chisel 使用 homebrew 来安装，如果你没有安装homebrew, 参考 homebrew。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br><span class="line">brew install chisel</span><br></pre></td></tr></table></figure><p>安装完成按照安装日志上的提示，在~/.lldbinit文件中添加一行，没有则新建。 提示类似如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">==&amp;gt; Caveats</span><br><span class="line">Add the following line to ~/.lldbinit to load chisel when Xcode launches:</span><br><span class="line">  command script import /usr/local/opt/chisel/libexec/fblldb.py</span><br></pre></td></tr></table></figure><p>做好上面的步骤，然后重启Xcode就可以尝试下了。</p><p>Chisel 为lldb提供了新增的便捷命令，是非常实用的命令</p><h4 id="pviews-命令"><a href="#pviews-命令" class="headerlink" title="pviews 命令"></a>pviews 命令</h4><p>这个命令可以递归打印所有的view，并能标示层级，相当于 UIView 的私有辅助方法 [view recursiveDescription] 。 善用使用这个功能会让你在调试定位问题时省去很多麻烦。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(lldb) pviews view</span><br><span class="line">&amp;lt;TestView: 0x18df8070; baseClass = UIControl; frame = (144 9; 126 167); layer = &amp;lt;CALayer: 0x18df8150&amp;gt;&amp;gt;</span><br><span class="line">   | &amp;lt;UIView: 0x18df81d0; frame = (0 0; 126 126); userInteractionEnabled = NO; layer = &amp;lt;CALayer: 0x18df8240&amp;gt;&amp;gt;</span><br><span class="line">   | &amp;lt;UIImageView: 0x18df8330; frame = (0 0; 126 126); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &amp;lt;CALayer: 0x18df83b0&amp;gt;&amp;gt;</span><br><span class="line">   | &amp;lt;UILabel: 0x18df8460; frame = (0 135; 126 14); text = &apos;haha&apos;; userInteractionEnabled = NO; layer = &amp;lt;_UILabelLayer: 0x18df7fb0&amp;gt;&amp;gt;</span><br><span class="line">   |    | &amp;lt;_UILabelContentLayer: 0x131a3d50&amp;gt; (layer)</span><br><span class="line">   | &amp;lt;UILabel: 0x18df8670; frame = (0 155; 126 12); text = &apos;hahaha&apos;; userInteractionEnabled = NO; layer = &amp;lt;_UILabelLayer: 0x18df8730&amp;gt;&amp;gt;</span><br><span class="line">   |    | &amp;lt;_UILabelContentLayer: 0x131bea10&amp;gt; (layer)</span><br><span class="line">   | &amp;lt;UIImageView: 0x18df88d0; frame = (0 9; 28 27); hidden = YES; opaque = NO; userInteractionEnabled = NO; layer = &amp;lt;CALayer: 0x18df8ba0&amp;gt;&amp;gt;</span><br></pre></td></tr></table></figure><h4 id="pvc-命令"><a href="#pvc-命令" class="headerlink" title="pvc 命令"></a>pvc 命令</h4><p>这个命令也是递归打印层级，但是不是view，而是viewController。利用它我们可以对viewController的结构一目了然。 其实苹果在IOS8也默默的添加了 UIViewController 的一个私有辅助方法 <code>[UIViewController _printHierarchy]</code>同样的效果，而且还可以看到 viewController 是否已经 viewDidLoad。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(lldb) pvc</span><br><span class="line">&amp;lt;TabBarController: 0x13772fd0; view = &amp;lt;UILayoutContainerView; 0x151b3a30&amp;gt;; frame = (0, 0; 414, 736)&amp;gt;</span><br><span class="line">   | &amp;lt;UINavigationController: 0x1602b800; view = &amp;lt;UILayoutContainerView; 0x1b00aca0&amp;gt;; frame = (0, 0; 414, 736)&amp;gt;</span><br><span class="line">   |   | &amp;lt;FirstViewController: 0x16029c00; view = &amp;lt;UIView; 0x1b01e1c0&amp;gt;; frame = (0, 0; 414, 736)&amp;gt;</span><br><span class="line">   | &amp;lt;UINavigationController: 0x138c5200; view = &amp;lt;UILayoutContainerView; 0x1316a080&amp;gt;; frame = (0, 0; 414, 736)&amp;gt;</span><br><span class="line">   |   | &amp;lt;SecondViewController: 0x16030400; view = &amp;lt;UIView; 0x2094b370&amp;gt;; frame = (0, 0; 414, 736)&amp;gt;</span><br><span class="line">   |   |   | &amp;lt;SecondChildViewController: 0x15af6000; view = &amp;lt;UIView; 0x18d4e650&amp;gt;; frame = (0, 64; 414, 628)&amp;gt;</span><br><span class="line">   | &amp;lt;UINavigationController: 0x1383ca00; view = &amp;lt;UILayoutContainerView; 0x13180070&amp;gt;; frame = (0, 0; 414, 736)&amp;gt;</span><br><span class="line">   |   | &amp;lt;ThirdViewController: 0x138ddc00; view = &amp;lt;UIView; 0x18df6650&amp;gt;; frame = (0, 0; 414, 736)&amp;gt;</span><br><span class="line">   |   |   | &amp;lt;ThirdChild1ViewController: 0x1393fe00; view = &amp;lt;UIView; 0x131ec000&amp;gt;; frame = (0, 0; 414, 672)&amp;gt;</span><br><span class="line">   |   |   | &amp;lt;ThirdChild2ViewController: 0x138dce00; view = &amp;lt;UIView; 0x204075a0&amp;gt;; frame = (414, 0; 414, 672)&amp;gt;</span><br><span class="line">   |   |   | &amp;lt;ThirdChild3ViewController: 0x138a8e00; view = &amp;lt;UIView; 0x20426250&amp;gt;; frame = (828, 0; 414, 672)&amp;gt;</span><br><span class="line">   | &amp;lt;UINavigationController: 0x160eca00; view = &amp;lt;UILayoutContainerView; 0x152f7d90&amp;gt;; frame = (0, 0; 414, 736)&amp;gt;</span><br><span class="line">   |   | &amp;lt;FourViewController: 0x13157cc0; view not loaded&amp;gt;</span><br></pre></td></tr></table></figure><h4 id="visualize-命令"><a href="#visualize-命令" class="headerlink" title="visualize 命令"></a>visualize 命令</h4><p>这是个很有意思的功能，它可以让你使用Mac的预览打开一个 UIImage, CGImageRef, UIView, 或 CALayer。 这个功能或许可以帮我们用来截图、用来定位一个view的具体内容。 但是在我试用了一下，发现暂时还是只能在模拟器时使用，真机还不行。<br><code>(lldb) visualize imageView</code></p><h4 id="fv-amp-fvc-命令"><a href="#fv-amp-fvc-命令" class="headerlink" title="fv &amp; fvc 命令"></a>fv &amp; fvc 命令</h4><p><code>fv</code> 和 <code>fvc</code> 这两个命令是用来通过类名搜索当前内存中存在的view和viewController实例的命令，支持正则搜索。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(lldb) fv scrollView</span><br><span class="line">0x18d3b8c0 UIScrollView</span><br><span class="line">0x137d0c50 UIScrollView</span><br><span class="line">0x131b1580 UIScrollView</span><br><span class="line">0x131b2070 UIScrollView</span><br><span class="line">(lldb) fvc Home</span><br><span class="line">0x1393fe00 HomeFeedsViewController</span><br><span class="line">0x138a8e00 HomeFeedsViewController</span><br><span class="line">(lldb)</span><br></pre></td></tr></table></figure><h4 id="show-amp-hide-命令"><a href="#show-amp-hide-命令" class="headerlink" title="show &amp; hide 命令"></a>show &amp; hide 命令</h4><p>这两个命令用来显示和隐藏一个指定的 UIView . 你甚至不需要Continue Progress. 就可以看到效果。</p><h4 id="mask-umask-border-unborder-命令"><a href="#mask-umask-border-unborder-命令" class="headerlink" title="mask/umask border/unborder 命令"></a>mask/umask border/unborder 命令</h4><p>这两组命令用来标识一个view或layer的位置时用， mask用来在view上覆盖一个半透明的矩形， border可以给view添加边框。但是在我实际使用的过程中mask总是会报错，估计是有bug， 那么mask/unmask 一般不要用好了，用border命令是一样的效果，反正二者的用途都是找到一个对应的view.</p><h4 id="caflush-命令"><a href="#caflush-命令" class="headerlink" title="caflush 命令"></a>caflush 命令</h4><p>这个命令会重新渲染，即可以重新绘制界面， 相当于执行了 [CATransaction flush] 方法，要注意如果在动画过程中执行这个命令，就直接渲染出动画结束的效果。<br>当你想在调试界面颜色、坐标之类的时候，可以直接在控制台修改属性，然后caflush就可以看到效果啦，是不是要比改代码，然后重新build省事多了呢。<br>例, 其中 $122 即是目标UIView：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(lldb) p view</span><br><span class="line">(long) $122 = 140718754142192</span><br><span class="line">(lldb) e (void)[$122 setBackgroundColor:[UIColor greenColor]]</span><br><span class="line">(lldb) caflush</span><br></pre></td></tr></table></figure><h4 id="bmessage-命令"><a href="#bmessage-命令" class="headerlink" title="bmessage 命令"></a>bmessage 命令</h4><p>这个命令就是用来打断点用的了，虽然大家断点可能都喜欢在图形界面里面打，但是考虑一种情况：我们想在 <code>[MyViewController viewWillAppear:]</code> 里面打断点，但是<code>MyViewController</code>并没有实现 <code>viewWillAppear:</code> 方法， 以往的作法可能就是在子类中实现下<code>viewWillAppear:</code>，然后打断点，然后rebuild。<br>那么幸好有了 bmessage命令。我们可以不用这样就可以打这个效果的断点： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(lldb) bmessage -[MyViewController viewWillAppear:]</span><br></pre></td></tr></table></figure><p>上面命令会在其父类的 <code>viewWillAppear:</code> 方法中打断点，并添加上了条件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[self isKindOfClass:[MyViewController class]]</span><br></pre></td></tr></table></figure><h4 id="自定义命令"><a href="#自定义命令" class="headerlink" title="自定义命令"></a>自定义命令</h4><p>我们也可以自定义插件，不过前提是要懂一些 python。 比如设计一个打印keyWindow的windowLevel的命令：<br>创建python脚本文件 /magical/commands/example.py :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># Example file with custom commands, located at /magical/commands/example.py</span><br><span class="line"></span><br><span class="line">import lldb</span><br><span class="line">import fblldbbase as fb</span><br><span class="line"></span><br><span class="line">def lldbcommands():</span><br><span class="line">  return [ PrintKeyWindowLevel() ]</span><br><span class="line"></span><br><span class="line">class PrintKeyWindowLevel(fb.FBCommand):</span><br><span class="line">  def name(self):</span><br><span class="line">    return &apos;pkeywinlevel&apos;</span><br><span class="line"></span><br><span class="line">  def description(self):</span><br><span class="line">    return &apos;An incredibly contrived command that prints the window level of the key window.&apos;</span><br><span class="line"></span><br><span class="line">  def run(self, arguments, options):</span><br><span class="line">    # It&apos;s a good habit to explicitly cast the type of all return</span><br><span class="line">    # values and arguments. LLDB can&apos;t always find them on its own.</span><br><span class="line">    lldb.debugger.HandleCommand(&apos;p (CGFloat)[(id)[(id)[UIApplication sharedApplication] keyWindow] windowLevel]&apos;)</span><br></pre></td></tr></table></figure><p>其中定义了PrintKeyWindowLevel的类，需要实现 name description run 方法来分别告诉名称、描述、和执行实体。<br>创建好脚本后，然后在前面安装时创建的 ~/.lldbinit文件中添加一行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">script fblldb.loadCommandsInDirectory(&apos;/magical/commands/&apos;)</span><br></pre></td></tr></table></figure><h4 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h4><p><a href="https://github.com/facebook/chisel/blob/master/README.md" target="_blank" rel="noopener">Chisel官方说明</a></p><p><a href="http://objccn.io/issue-19-2/" target="_blank" rel="noopener">与调试器共舞 – LLDB 的华尔兹</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#iOS_LLDB调试&lt;/p&gt;
&lt;h3 id=&quot;断点调试&quot;&gt;&lt;a href=&quot;#断点调试&quot; class=&quot;headerlink&quot; title=&quot;断点调试&quot;&gt;&lt;/a&gt;断点调试&lt;/h3&gt;&lt;h4 id=&quot;全局断点（Global-BreakPoint）&quot;&gt;&lt;a href=&quot;#全局断
      
    
    </summary>
    
    
      <category term="iOS" scheme="http://iiooio.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Ghost_添加Disqus评论框</title>
    <link href="http://iiooio.com/blog/Ghost_%E6%B7%BB%E5%8A%A0Disqus%E8%AF%84%E8%AE%BA%E6%A1%86/"/>
    <id>http://iiooio.com/blog/Ghost_添加Disqus评论框/</id>
    <published>2015-06-30T09:22:34.000Z</published>
    <updated>2018-04-18T12:32:00.004Z</updated>
    
    <content type="html"><![CDATA[<p>#Ghost_添加Disqus评论框</p><p>####添加Disqus的评论框<br>先需要注册一个 Disqus 账号，并且将网站注册到 Disqus 上，可以在 <a href="https://disqus.com/admin/signup/" target="_blank" rel="noopener">这里</a> 注册自己的网站。</p><p>在这一步需要记录下的是那个独一无二的链接所填写的部分，比如我现在的是 alkaliner ，通过这个链接可以直接访问管理面板。<br>点击 完成注册 后会跳转到一个配置页面，可以选择所用的程序，并进行添加。你可以发现 天了噜居然没有 Ghost!<br>点开 Universal Code，可以看到通用的代码。当然这个时候还需要打开 Terminal，使用 SSH 连接服务器。</p><p>进入 Ghost安装目录/content/themes/casper/，编辑 post.hbs 。（这里以默认主题为例）</p><p>如图所示，在  后插入（注意修改 shortname）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"disqus_thread"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> disqus_shortname = <span class="string">'alkaliner'</span>; <span class="comment">// 注意修改为自己的 shortname</span></span><br><span class="line">    <span class="keyword">var</span> disqus_identifier = <span class="string">'&#123;&#123;post.id&#125;&#125;'</span>;</span><br><span class="line">    <span class="comment">/* * * DON'T EDIT BELOW THIS LINE * * */</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> dsq = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>); dsq.type = <span class="string">'text/javascript'</span>; dsq.async = <span class="literal">true</span>;</span><br><span class="line">        dsq.src = <span class="string">'//'</span> + disqus_shortname + <span class="string">'.disqus.com/embed.js'</span>;</span><br><span class="line">       (<span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>] || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]).appendChild(dsq);</span><br><span class="line">  &#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=\"http:/</span><span class="regexp">/disqus.com/</span>?ref_noscript\<span class="string">"&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</span></span><br><span class="line"><span class="string">&lt;a href=\"http://disqus.com\" class=\"dsq-brlink\"&gt;comments powered by &lt;span class=\"logo-disqus\"&gt;Disqus&lt;/span&gt;&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><p>保存，退出。<br>截至这里评论框就已经添加好了～具体的效果可以将页面向下滚动，查看详情。</p><p>####有关在首页添加评论计数，可以继续向下：<br>编辑 default.hbs，在  前加入以下内容（注意修改 shortname）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="comment">/* * * CONFIGURATION VARIABLES * * */</span></span><br><span class="line"><span class="keyword">var</span> disqus_shortname = <span class="string">'alkaliner'</span>; <span class="comment">// 注意修改为自己的 shortname</span></span><br><span class="line"><span class="comment">/* * * DON'T EDIT BELOW THIS LINE * * */</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>); s.async = <span class="literal">true</span>;</span><br><span class="line">    s.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">    s.src = <span class="string">'//'</span> + disqus_shortname + <span class="string">'.disqus.com/count.js'</span>;</span><br><span class="line">    (<span class="built_in">document</span>.getElementsByTagName(<span class="string">'HEAD'</span>)[<span class="number">0</span>] || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'BODY'</span>)[<span class="number">0</span>]).appendChild(s);</span><br><span class="line">&#125;());</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>再编辑 partials/loop.hbs ，如图所示在 <footer class="\"post-meta\""></footer> 中加入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=\<span class="string">"&#123;&#123;url&#125;&#125;#disqus_thread\"&gt;Comments&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><p>保存，重启 Ghost 。<br>现在即可在首页看到评论数量。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#Ghost_添加Disqus评论框&lt;/p&gt;
&lt;p&gt;####添加Disqus的评论框&lt;br&gt;先需要注册一个 Disqus 账号，并且将网站注册到 Disqus 上，可以在 &lt;a href=&quot;https://disqus.com/admin/signup/&quot; target=&quot;
      
    
    </summary>
    
    
      <category term="CentOS7" scheme="http://iiooio.com/tags/CentOS7/"/>
    
  </entry>
  
  <entry>
    <title>Ghost_添加代码高亮</title>
    <link href="http://iiooio.com/blog/Ghost_%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE/"/>
    <id>http://iiooio.com/blog/Ghost_添加代码高亮/</id>
    <published>2015-05-30T09:22:34.000Z</published>
    <updated>2018-04-18T12:32:00.004Z</updated>
    
    <content type="html"><![CDATA[<p>#Ghost_添加代码高亮</p><p>首先做个展示，如下是一段 C# 代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">namespace Testhighlight &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，怎么为自己使用的 Ghost 主题添加代码高亮呢？<br>打开 <a href="https://highlightjs.org/download/" target="_blank" rel="noopener">Highlightjs.org</a> 选择你想要安装代码高亮的语言，然后点击 Download。</p><p>将下载的 “highlight.zip” 解包并且上传到你的 Ghost 主题文件夹，比如我的是 /ghost/content/themes/casper/assets</p><p>打开你喜欢的编辑器，编辑你主题的 “default.hbs” ，在 <code>&lt;head&gt;&lt;/head&gt;</code> 标签之间添加:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/assets/css/highlight/monokai_sublime.css"</span> /&gt;</span> <span class="comment">&lt;!-- 这里指定的 css 文件是代码高亮的主题，可以根据你的喜好自由选择--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/assets/js/highlight.pack.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">hljs.initHighlightingOnLoad();</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后：保存你的 “default.hbs” 文件并且上传到服务器，重启你的 Ghost 博客，大功告成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#Ghost_添加代码高亮&lt;/p&gt;
&lt;p&gt;首先做个展示，如下是一段 C# 代码：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/spa
      
    
    </summary>
    
    
      <category term="Ghost" scheme="http://iiooio.com/tags/Ghost/"/>
    
  </entry>
  
  <entry>
    <title>Ghost_开源主题</title>
    <link href="http://iiooio.com/blog/Ghost_%E5%BC%80%E6%BA%90%E4%B8%BB%E9%A2%98/"/>
    <id>http://iiooio.com/blog/Ghost_开源主题/</id>
    <published>2015-05-30T09:22:34.000Z</published>
    <updated>2018-04-18T12:32:00.004Z</updated>
    
    <content type="html"><![CDATA[<p>#Ghost_开源主题</p><p>####Yasuko<br><a href="https://github.com/foru17/Yasuko" target="_blank" rel="noopener">https://github.com/foru17/Yasuko</a></p><p>####uno-zen<br><a href="https://github.com/Kikobeats/uno-zen" target="_blank" rel="noopener">https://github.com/Kikobeats/uno-zen</a></p><p>####ghost-themes<br><a href="https://github.com/haydenbleasel/ghost-themes" target="_blank" rel="noopener">https://github.com/haydenbleasel/ghost-themes</a></p><p>####ghostwriter<br><a href="https://github.com/roryg/ghostwriter" target="_blank" rel="noopener">https://github.com/roryg/ghostwriter</a></p><p>####ghostium<br><a href="https://github.com/oswaldoacauan/ghostium" target="_blank" rel="noopener">https://github.com/oswaldoacauan/ghostium</a></p><p>####Mapache<br><a href="https://github.com/godofredoninja/Mapache" target="_blank" rel="noopener">https://github.com/godofredoninja/Mapache</a></p><p>####Vapor<br><a href="https://github.com/sethlilly/Vapor" target="_blank" rel="noopener">https://github.com/sethlilly/Vapor</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#Ghost_开源主题&lt;/p&gt;
&lt;p&gt;####Yasuko&lt;br&gt;&lt;a href=&quot;https://github.com/foru17/Yasuko&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/foru17/Yasu
      
    
    </summary>
    
    
      <category term="Ghost" scheme="http://iiooio.com/tags/Ghost/"/>
    
  </entry>
  
  <entry>
    <title>Linux_Fail2Ban</title>
    <link href="http://iiooio.com/blog/Linux_Fail2Ban/"/>
    <id>http://iiooio.com/blog/Linux_Fail2Ban/</id>
    <published>2015-04-30T00:21:34.000Z</published>
    <updated>2018-04-18T12:32:00.006Z</updated>
    
    <content type="html"><![CDATA[<p>#Linux_Fail2Ban</p><p>Fail2Ban是一个Python写的安全工具，其用途就是判断是否有人暴力破解密码，是否有人使用DDOS攻击和CC攻击，刚开始也是抱着尝试的心理，根据网上教程总结安装成功，并且配置了邮件报警（需要安装Sendmail），下面来看看效果吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">Hi,</span><br><span class="line">The IP 43.229.53.43 has just been banned by Fail2Ban after</span><br><span class="line">5 attempts against SSH.</span><br><span class="line">Here are more information about 43.229.53.43:</span><br><span class="line">[Querying whois.v6nic.net]</span><br><span class="line">[whois.v6nic.net: Name or service not known]</span><br><span class="line">[Unable to connect to remote host]</span><br><span class="line">Regards,</span><br><span class="line">Fail2Ban</span><br><span class="line"></span><br><span class="line">Hi,</span><br><span class="line">The IP 218.65.30.217 has just been banned by Fail2Ban after</span><br><span class="line">5 attempts against SSH.</span><br><span class="line">Here are more information about 218.65.30.217:</span><br><span class="line">[Querying whois.apnic.net]</span><br><span class="line">[whois.apnic.net]</span><br><span class="line">% [whois.apnic.net]</span><br><span class="line">% Whois data copyright terms    http://www.apnic.net/db/dbcopyright.html</span><br><span class="line">% Information related to ‘218.64.0.0 – 218.65.127.255’</span><br><span class="line">inetnum:        218.64.0.0 – 218.65.127.255</span><br><span class="line">netname:        CHINANET-JX</span><br><span class="line">country:        CN</span><br><span class="line">descr:          CHINANET jiangxi province network</span><br><span class="line">descr:          China Telecom</span><br><span class="line">descr:          No.31,jingrong street</span><br><span class="line">descr:          Beijing 100032</span><br><span class="line">admin-c:        CH93-AP</span><br><span class="line">tech-c:         JN113-AP</span><br><span class="line">changed:        hostmaster@cn.net 20020829</span><br><span class="line">mnt-by:         MAINT-CHINANET</span><br><span class="line">mnt-lower:      MAINT-IP-WWF</span><br><span class="line">status:         ALLOCATED NON-PORTABLE</span><br><span class="line">source:         APNIC</span><br><span class="line">role:           JXDCB NET</span><br><span class="line">address:        Jiangxi telecom network operation support department</span><br><span class="line">address:        No.2009, Beijing East Road , nanchangÃ¯Â¼Âjiangxi province</span><br><span class="line">country:        CN</span><br><span class="line">phone:          +86 79186600000</span><br><span class="line">e-mail:         wzzx_2013@189.cn</span><br><span class="line">remarks:        send spam reports to wzzx_2013@189.cn</span><br><span class="line">remarks:        and abuse reports to wzzx_2013@189.cn</span><br><span class="line">remarks:        http://www.online.jx.cn</span><br><span class="line">admin-c:        XY1-AP</span><br><span class="line">tech-c:         WZ1-CN</span><br><span class="line">tech-c:         WW49-AP</span><br><span class="line">nic-hdl:        JN113-AP</span><br><span class="line">notify:         wzzx_2013@189.cn</span><br><span class="line">mnt-by:         MAINT-IP-WWF</span><br><span class="line">changed:        hm-changed@apnic.net 20020812</span><br><span class="line">changed:        chenyiq@gsta.com 20130221</span><br><span class="line">source:         APNIC</span><br><span class="line">person:         Chinanet Hostmaster</span><br><span class="line">nic-hdl:        CH93-AP</span><br><span class="line">e-mail:         anti-spam@ns.chinanet.cn.net</span><br><span class="line">address:        No.31 ,jingrong street,beijing</span><br><span class="line">address:        100032</span><br><span class="line">phone:          +86-10-58501724</span><br><span class="line">fax-no:         +86-10-58501724</span><br><span class="line">country:        CN</span><br><span class="line">changed:        dingsy@cndata.com 20070416</span><br><span class="line">changed:        zhengzm@gsta.com 20140227</span><br><span class="line">mnt-by:         MAINT-CHINANET</span><br><span class="line">source:         APNIC</span><br><span class="line">% This query was served by the APNIC Whois Service version 1.69.1-APNICv1r0 (UNDEFINED)</span><br><span class="line">Regards,</span><br><span class="line">Fail2Ban</span><br></pre></td></tr></table></figure><p>还有很多就不列举了，可见还是有人瞄上我了，不过5次尝试就会被ban一天，让他们慢慢穷举去吧！下面介绍怎么安装：</p><p>首先配置YUM源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/CentOS-Base.repo</span><br></pre></td></tr></table></figure><p>在最后新增：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[atrpms]</span><br><span class="line">name=Red Hat Enterprise Linux $releasever - $basearch - ATrpms</span><br><span class="line">baseurl=http://dl.atrpms.net/el$releasever-$basearch/atrpms/stable</span><br><span class="line">gpgkey=http://ATrpms.net/RPM-GPG-KEY.atrpms</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><p>然后执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install fail2ban</span><br></pre></td></tr></table></figure><p>等待安装，几秒钟就安装成功，或者采用RPM安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Centos6:</span><br><span class="line">rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span><br><span class="line">yum install fail2ban</span><br><span class="line"></span><br><span class="line">Centos7:</span><br><span class="line">rpm -Uvh http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-2.noarch.rpm</span><br><span class="line">yum install fail2ban</span><br></pre></td></tr></table></figure><p>安装成功后，服务配置目录为：/etc/fail2ban</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/etc/fail2ban/action.d                #动作文件夹，内含默认文件。iptables以及mail等动作配置</span><br><span class="line">/etc/fail2ban/fail2ban.conf           #定义了fai2ban日志级别、日志位置及sock文件位置</span><br><span class="line">/etc/fail2ban/filter.d                #条件文件夹，内含默认文件。过滤日志关键内容设置</span><br><span class="line">/etc/fail2ban/jail.conf               #主要配置文件，模块化。主要设置启用ban动作的服务及动作阀值</span><br><span class="line">/etc/rc.d/init.d/fail2ban             #启动脚本文件</span><br></pre></td></tr></table></figure><p>其他的默认即可，只需要修改etc/fail2ban/jail.conf文件即可。常用的修改的参数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ignoreip = 127.0.0.1 #忽略的IP列表,不受设置限制（白名单）</span><br><span class="line">bantime = 600 #屏蔽时间，单位：秒</span><br><span class="line">findtime = 600 #这个时间段内超过规定次数会被ban掉</span><br><span class="line">maxretry = 3 #最大尝试次数</span><br><span class="line">backend = auto #日志修改检测机制（gamin、polling和auto这三种）</span><br><span class="line">[ssh] #针对各服务的检查配置，如设置bantime、findtime、maxretry和全局冲突，服务优先级大于全局设置</span><br><span class="line">enabled = true #是否激活此项（true/false）</span><br><span class="line">filter = sshd #过滤规则filter的名字，对应filter.d目录下的sshd.conf</span><br><span class="line">action = iptables[name=SSH, port=ssh, protocol=tcp] #动作的相关参数</span><br><span class="line">sendmail-whois[name=SSH, dest=root, sender=fail2ban@example.com] #触发报警的收件人</span><br><span class="line">logpath = /var/log/secure #检测的系统的登陆日志文件</span><br><span class="line">maxretry = 5 #最大尝试次数</span><br></pre></td></tr></table></figure><p>启动Fail2Ban:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CentOS 6:</span><br><span class="line">service fail2ban restart</span><br><span class="line"></span><br><span class="line">CentOS 7:</span><br><span class="line">systemctl restart fail2ban.service</span><br></pre></td></tr></table></figure><p>加入开机启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CentOS 6:</span><br><span class="line">chkconfig fail2ban on</span><br><span class="line"></span><br><span class="line">CentOS 7:</span><br><span class="line">systemctl enable fail2ban</span><br></pre></td></tr></table></figure><p>这样就能保证不会被穷举到SSH的密码，当然这个工具是很强大的.</p><h5 id="检查fail2ban状态并解禁被锁住的IP地址"><a href="#检查fail2ban状态并解禁被锁住的IP地址" class="headerlink" title="检查fail2ban状态并解禁被锁住的IP地址"></a>检查fail2ban状态并解禁被锁住的IP地址</h5><p>下面是查看sshd 屏蔽的IP 地址：</p><p><code>sudo fail2ban-client status sshd</code><br>会显示如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@sdd-15 ~]# sudo fail2ban-client status sshd</span><br><span class="line">Status for the jail: sshd</span><br><span class="line">|- Filter</span><br><span class="line">|  |- Currently failed: 0</span><br><span class="line">|  |- Total failed: 5</span><br><span class="line">|  `- File list:    /var/log/secure</span><br><span class="line">`- Actions</span><br><span class="line">   |- Currently banned: 1</span><br><span class="line">   |- Total banned: 1</span><br><span class="line">   `- Banned IP list:   112.14.11.45</span><br></pre></td></tr></table></figure><h5 id="解锁特定的IP地址："><a href="#解锁特定的IP地址：" class="headerlink" title="解锁特定的IP地址："></a>解锁特定的IP地址：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fail2ban-client set sshd unbanip 112.14.11.45</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#Linux_Fail2Ban&lt;/p&gt;
&lt;p&gt;Fail2Ban是一个Python写的安全工具，其用途就是判断是否有人暴力破解密码，是否有人使用DDOS攻击和CC攻击，刚开始也是抱着尝试的心理，根据网上教程总结安装成功，并且配置了邮件报警（需要安装Sendmail），下面来看
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://iiooio.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Mac_Cocoapods安装</title>
    <link href="http://iiooio.com/blog/Mac%20Cocoapods%E5%AE%89%E8%A3%85/"/>
    <id>http://iiooio.com/blog/Mac Cocoapods安装/</id>
    <published>2015-04-28T00:21:34.000Z</published>
    <updated>2018-04-18T12:32:00.007Z</updated>
    
    <content type="html"><![CDATA[<p>#Mac_Cocoapods安装</p><h4 id="1、直接安装"><a href="#1、直接安装" class="headerlink" title="1、直接安装"></a>1、直接安装</h4><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install cocoapods</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR:  Could not find a valid gem &apos;cocoapods&apos; (&amp;gt;= 0) in any repository</span><br></pre></td></tr></table></figure><p>办法：需要更新Ruby</p><h4 id="2、更新Ruby"><a href="#2、更新Ruby" class="headerlink" title="2、更新Ruby"></a>2、更新Ruby</h4><p>第一步：切换淘宝的源</p><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gem sources --remove https://rubygems.org/</span><br><span class="line">gem sources -a http://ruby.taobao.org/</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error fetching http://ruby.taobao.org/:</span><br><span class="line">    bad response Not Found 404 (http://ruby.taobao.org/specs.4.8.gz)</span><br></pre></td></tr></table></figure><p>办法：淘宝的源已经变成了<a href="https://ruby.taobao.org/，当然还可以去rubygems官网下载源码安装。" target="_blank" rel="noopener">https://ruby.taobao.org/，当然还可以去rubygems官网下载源码安装。</a></p><p>第二步：更新Ruby<br>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem update —system</span><br></pre></td></tr></table></figure><h4 id="3、安装cocoapods"><a href="#3、安装cocoapods" class="headerlink" title="3、安装cocoapods"></a>3、安装cocoapods</h4><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install cocoapods</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Fetching: i18n-0.7.0.gem (100%)</span><br><span class="line">Successfully installed i18n-0.7.0</span><br><span class="line">Fetching: thread_safe-0.3.5.gem (100%)</span><br><span class="line">Successfully installed thread_safe-0.3.5</span><br><span class="line">Fetching: tzinfo-1.2.2.gem (100%)</span><br><span class="line">Successfully installed tzinfo-1.2.2</span><br><span class="line">Fetching: minitest-5.8.2.gem (100%)</span><br><span class="line">Successfully installed minitest-5.8.2</span><br><span class="line">Fetching: activesupport-4.2.4.gem (100%)</span><br><span class="line">Successfully installed activesupport-4.2.4</span><br><span class="line">Fetching: nap-1.0.0.gem (100%)</span><br><span class="line">Successfully installed nap-1.0.0</span><br><span class="line">Fetching: fuzzy_match-2.0.4.gem (100%)</span><br><span class="line">ERROR:  While executing gem ... (Errno::EPERM)</span><br><span class="line">    Operation not permitted - /usr/bin/fuzzy_match</span><br></pre></td></tr></table></figure><p>办法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install -n /usr/local/bin cocoapods</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#Mac_Cocoapods安装&lt;/p&gt;
&lt;h4 id=&quot;1、直接安装&quot;&gt;&lt;a href=&quot;#1、直接安装&quot; class=&quot;headerlink&quot; title=&quot;1、直接安装&quot;&gt;&lt;/a&gt;1、直接安装&lt;/h4&gt;&lt;p&gt;命令：&lt;/p&gt;
&lt;figure class=&quot;highlig
      
    
    </summary>
    
    
      <category term="Mac" scheme="http://iiooio.com/tags/Mac/"/>
    
  </entry>
  
</feed>
